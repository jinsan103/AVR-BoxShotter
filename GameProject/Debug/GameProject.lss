
GameProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002f2  00800100  0000114c  000011e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000114c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000412  008003f2  008003f2  000014d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002894  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000caa  00000000  00000000  00003fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001333  00000000  00000000  00004c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000065c  00000000  00000000  00005fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000740  00000000  00000000  00006610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000209c  00000000  00000000  00006d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00008dec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	52 c1       	rjmp	.+676    	; 0x2aa <__vector_1>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	45 c2       	rjmp	.+1162   	; 0x4cc <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e4       	ldi	r30, 0x4C	; 76
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 3f       	cpi	r26, 0xF2	; 242
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	a2 ef       	ldi	r26, 0xF2	; 242
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 30       	cpi	r26, 0x04	; 4
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	95 d2       	rcall	.+1322   	; 0x5ee <main>
      c4:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <Port_init>:

unsigned int Read_Adc_Data(unsigned char adc_input);


void Port_init(void){
	PORTA=0x00; DDRA=0xff;
      ca:	1b ba       	out	0x1b, r1	; 27
      cc:	8f ef       	ldi	r24, 0xFF	; 255
      ce:	8a bb       	out	0x1a, r24	; 26
	PORTB=0xff; DDRB=0xff;
      d0:	88 bb       	out	0x18, r24	; 24
      d2:	87 bb       	out	0x17, r24	; 23
	PORTC=0x00; DDRC=0xf0;
      d4:	15 ba       	out	0x15, r1	; 21
      d6:	90 ef       	ldi	r25, 0xF0	; 240
      d8:	94 bb       	out	0x14, r25	; 20
	PORTD=0xff; DDRD=0x00;
      da:	82 bb       	out	0x12, r24	; 18
      dc:	11 ba       	out	0x11, r1	; 17
	PORTE=0x00; DDRE=0xff;
      de:	13 b8       	out	0x03, r1	; 3
      e0:	82 b9       	out	0x02, r24	; 2
	PORTF=0x00; DDRF=0x00;
      e2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
      e6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
      ea:	08 95       	ret

000000ec <interrupt_init>:
}

void interrupt_init(void){
	EICRA = 0x02;//0번 인터럽트 사용
      ec:	82 e0       	ldi	r24, 0x02	; 2
      ee:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EIMSK = 0x01;//0번 인터럽트 허용
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	89 bf       	out	0x39, r24	; 57
      f6:	08 95       	ret

000000f8 <creat_box>:
}


void creat_box(){
	srand(TCNT0);//랜덤을 보장하기 위함
      f8:	82 b7       	in	r24, 0x32	; 50
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	cc d7       	rcall	.+3992   	; 0x1096 <srand>
	boxX1 = (rand()%(42-len)) + 10;//min 10 max 32 maxLen=20
      fe:	c8 d7       	rcall	.+3984   	; 0x1090 <rand>
     100:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <len>
     104:	6a e2       	ldi	r22, 0x2A	; 42
     106:	70 e0       	ldi	r23, 0x00	; 0
     108:	62 1b       	sub	r22, r18
     10a:	71 09       	sbc	r23, r1
     10c:	58 d7       	rcall	.+3760   	; 0xfbe <__divmodhi4>
     10e:	86 5f       	subi	r24, 0xF6	; 246
     110:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <boxX1>
     114:	82 0f       	add	r24, r18
	boxX2 = boxX1+len;
     116:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <boxX2>
	boxY1 = (rand()%(126-len));
     11a:	ba d7       	rcall	.+3956   	; 0x1090 <rand>
     11c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <len>
     120:	6e e7       	ldi	r22, 0x7E	; 126
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	62 1b       	sub	r22, r18
     126:	71 09       	sbc	r23, r1
     128:	4a d7       	rcall	.+3732   	; 0xfbe <__divmodhi4>
     12a:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <boxY1>
     12e:	82 0f       	add	r24, r18
	boxY2 = boxY1+len;
     130:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <boxY2>
     134:	08 95       	ret

00000136 <screen_start>:
     136:	03 d3       	rcall	.+1542   	; 0x73e <lcd_clear>
	GLCD_Circle_black(curX,curY,2);
}

void screen_start(void){
	lcd_clear();
	lcd_string(1,0, "====================");
     138:	43 ee       	ldi	r20, 0xE3	; 227
     13a:	52 e0       	ldi	r21, 0x02	; 2
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	5c d3       	rcall	.+1720   	; 0x7fa <lcd_string>
	lcd_string(2,0, "*      G A M E     *");
     142:	48 ef       	ldi	r20, 0xF8	; 248
     144:	52 e0       	ldi	r21, 0x02	; 2
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	82 e0       	ldi	r24, 0x02	; 2
     14a:	57 d3       	rcall	.+1710   	; 0x7fa <lcd_string>
	lcd_string(3,0, "*                  *");
     14c:	4d e0       	ldi	r20, 0x0D	; 13
     14e:	53 e0       	ldi	r21, 0x03	; 3
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	52 d3       	rcall	.+1700   	; 0x7fa <lcd_string>
	lcd_string(4,0, "*        BOX       *");
     156:	42 e2       	ldi	r20, 0x22	; 34
     158:	53 e0       	ldi	r21, 0x03	; 3
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	84 e0       	ldi	r24, 0x04	; 4
     15e:	4d d3       	rcall	.+1690   	; 0x7fa <lcd_string>
	lcd_string(5,0, "*      SHOTTER     *");
     160:	47 e3       	ldi	r20, 0x37	; 55
     162:	53 e0       	ldi	r21, 0x03	; 3
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	85 e0       	ldi	r24, 0x05	; 5
     168:	48 d3       	rcall	.+1680   	; 0x7fa <lcd_string>
	lcd_string(6,0, "====================");
     16a:	43 ee       	ldi	r20, 0xE3	; 227
     16c:	52 e0       	ldi	r21, 0x02	; 2
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	86 e0       	ldi	r24, 0x06	; 6
     172:	43 c3       	rjmp	.+1670   	; 0x7fa <lcd_string>
     174:	08 95       	ret

00000176 <screen_over>:
     176:	cf 93       	push	r28
	lcd_string(7,13, "Score");
	lcd_xy(7,18);
	GLCD_2DigitDecimal(sco);
}

void screen_over(int score){//점수를 받음
     178:	c8 2f       	mov	r28, r24
	lcd_clear();
     17a:	e1 d2       	rcall	.+1474   	; 0x73e <lcd_clear>
	SError();
     17c:	80 d2       	rcall	.+1280   	; 0x67e <SError>
     17e:	43 ee       	ldi	r20, 0xE3	; 227
	lcd_string(1,0, "====================");
     180:	52 e0       	ldi	r21, 0x02	; 2
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	39 d3       	rcall	.+1650   	; 0x7fa <lcd_string>
     188:	4c e4       	ldi	r20, 0x4C	; 76
	lcd_string(2,0, "*   GAME   OVER!   *");
     18a:	53 e0       	ldi	r21, 0x03	; 3
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	34 d3       	rcall	.+1640   	; 0x7fa <lcd_string>
     192:	4d e0       	ldi	r20, 0x0D	; 13
	lcd_string(3,0, "*                  *");
     194:	53 e0       	ldi	r21, 0x03	; 3
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	83 e0       	ldi	r24, 0x03	; 3
     19a:	2f d3       	rcall	.+1630   	; 0x7fa <lcd_string>
     19c:	4d e0       	ldi	r20, 0x0D	; 13
	lcd_string(4,0, "*                  *");
     19e:	53 e0       	ldi	r21, 0x03	; 3
     1a0:	60 e0       	ldi	r22, 0x00	; 0
     1a2:	84 e0       	ldi	r24, 0x04	; 4
     1a4:	2a d3       	rcall	.+1620   	; 0x7fa <lcd_string>
     1a6:	41 e6       	ldi	r20, 0x61	; 97
	lcd_string(5,0, "* YOUR SCORE :  ");
     1a8:	53 e0       	ldi	r21, 0x03	; 3
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	85 e0       	ldi	r24, 0x05	; 5
     1ae:	25 d3       	rcall	.+1610   	; 0x7fa <lcd_string>
	lcd_xy(5,15);
     1b0:	6f e0       	ldi	r22, 0x0F	; 15
     1b2:	85 e0       	ldi	r24, 0x05	; 5
     1b4:	df d2       	rcall	.+1470   	; 0x774 <lcd_xy>
	GLCD_2DigitDecimal(score);
     1b6:	8c 2f       	mov	r24, r28
     1b8:	55 d5       	rcall	.+2730   	; 0xc64 <GLCD_2DigitDecimal>
     1ba:	40 e2       	ldi	r20, 0x20	; 32
	lcd_string(5,19, "*");
     1bc:	53 e0       	ldi	r21, 0x03	; 3
     1be:	63 e1       	ldi	r22, 0x13	; 19
     1c0:	85 e0       	ldi	r24, 0x05	; 5
     1c2:	1b d3       	rcall	.+1590   	; 0x7fa <lcd_string>
     1c4:	43 ee       	ldi	r20, 0xE3	; 227
	lcd_string(6,0, "====================");
     1c6:	52 e0       	ldi	r21, 0x02	; 2
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	86 e0       	ldi	r24, 0x06	; 6
     1cc:	16 d3       	rcall	.+1580   	; 0x7fa <lcd_string>
     1ce:	cf 91       	pop	r28
     1d0:	08 95       	ret

000001d2 <screen_win>:
}
     1d2:	13 be       	out	0x33, r1	; 51
     1d4:	b4 d2       	rcall	.+1384   	; 0x73e <lcd_clear>

void screen_win(){
	TCCR0=0x00;
	lcd_clear();
	lcd_string(1,0, "====================");
     1d6:	43 ee       	ldi	r20, 0xE3	; 227
     1d8:	52 e0       	ldi	r21, 0x02	; 2
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	0d d3       	rcall	.+1562   	; 0x7fa <lcd_string>
	lcd_string(2,0, "*   WELL   DONE!   *");
     1e0:	42 e7       	ldi	r20, 0x72	; 114
     1e2:	53 e0       	ldi	r21, 0x03	; 3
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	08 d3       	rcall	.+1552   	; 0x7fa <lcd_string>
	lcd_string(3,0, "*    YOU   WIN!    *");
     1ea:	47 e8       	ldi	r20, 0x87	; 135
     1ec:	53 e0       	ldi	r21, 0x03	; 3
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	83 e0       	ldi	r24, 0x03	; 3
     1f2:	03 d3       	rcall	.+1542   	; 0x7fa <lcd_string>
	lcd_string(4,0, "*                  *");
     1f4:	4d e0       	ldi	r20, 0x0D	; 13
     1f6:	53 e0       	ldi	r21, 0x03	; 3
     1f8:	60 e0       	ldi	r22, 0x00	; 0
     1fa:	84 e0       	ldi	r24, 0x04	; 4
     1fc:	fe d2       	rcall	.+1532   	; 0x7fa <lcd_string>
	lcd_string(5,0, "* YOUR SCORE :  ");
     1fe:	41 e6       	ldi	r20, 0x61	; 97
     200:	53 e0       	ldi	r21, 0x03	; 3
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	85 e0       	ldi	r24, 0x05	; 5
     206:	f9 d2       	rcall	.+1522   	; 0x7fa <lcd_string>
	lcd_xy(5,15);
     208:	6f e0       	ldi	r22, 0x0F	; 15
     20a:	85 e0       	ldi	r24, 0x05	; 5
     20c:	b3 d2       	rcall	.+1382   	; 0x774 <lcd_xy>
     20e:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <score>
	GLCD_2DigitDecimal(score);
     212:	28 d5       	rcall	.+2640   	; 0xc64 <GLCD_2DigitDecimal>
     214:	40 e2       	ldi	r20, 0x20	; 32
	lcd_string(5,19, "*");
     216:	53 e0       	ldi	r21, 0x03	; 3
     218:	63 e1       	ldi	r22, 0x13	; 19
     21a:	85 e0       	ldi	r24, 0x05	; 5
     21c:	ee d2       	rcall	.+1500   	; 0x7fa <lcd_string>
     21e:	43 ee       	ldi	r20, 0xE3	; 227
	lcd_string(6,0, "====================");
     220:	52 e0       	ldi	r21, 0x02	; 2
     222:	60 e0       	ldi	r22, 0x00	; 0
     224:	86 e0       	ldi	r24, 0x06	; 6
     226:	e9 c2       	rjmp	.+1490   	; 0x7fa <lcd_string>
     228:	08 95       	ret

0000022a <screen_nextstage>:
     22a:	89 d2       	rcall	.+1298   	; 0x73e <lcd_clear>
     22c:	43 ee       	ldi	r20, 0xE3	; 227
}

void screen_nextstage(){
	lcd_clear();
	lcd_string(1,0, "====================");
     22e:	52 e0       	ldi	r21, 0x02	; 2
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	e2 d2       	rcall	.+1476   	; 0x7fa <lcd_string>
	lcd_string(2,0, "*      CLEAR!      *");
     236:	4c e9       	ldi	r20, 0x9C	; 156
     238:	53 e0       	ldi	r21, 0x03	; 3
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	82 e0       	ldi	r24, 0x02	; 2
     23e:	dd d2       	rcall	.+1466   	; 0x7fa <lcd_string>
	lcd_string(3,0, "*                  *");
     240:	4d e0       	ldi	r20, 0x0D	; 13
     242:	53 e0       	ldi	r21, 0x03	; 3
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	83 e0       	ldi	r24, 0x03	; 3
     248:	d8 d2       	rcall	.+1456   	; 0x7fa <lcd_string>
	lcd_string(4,0, "*    READY FOR     *");
     24a:	41 eb       	ldi	r20, 0xB1	; 177
     24c:	53 e0       	ldi	r21, 0x03	; 3
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	84 e0       	ldi	r24, 0x04	; 4
     252:	d3 d2       	rcall	.+1446   	; 0x7fa <lcd_string>
	lcd_string(5,0, "*   NEXT  STAGE!   *");
     254:	46 ec       	ldi	r20, 0xC6	; 198
     256:	53 e0       	ldi	r21, 0x03	; 3
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	85 e0       	ldi	r24, 0x05	; 5
     25c:	ce d2       	rcall	.+1436   	; 0x7fa <lcd_string>
	lcd_string(6,0, "====================");
     25e:	43 ee       	ldi	r20, 0xE3	; 227
     260:	52 e0       	ldi	r21, 0x02	; 2
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	86 e0       	ldi	r24, 0x06	; 6
     266:	c9 d2       	rcall	.+1426   	; 0x7fa <lcd_string>
     268:	84 e1       	ldi	r24, 0x14	; 20
	len=20;
     26a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <len>
     26e:	08 95       	ret

00000270 <isIn>:
     270:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <curX>
	
}
bool isIn(){
	if(boxX1<curX && curX<boxX2 && boxY1<curY && curY<boxY2){
     274:	90 91 ff 03 	lds	r25, 0x03FF	; 0x8003ff <boxX1>
     278:	98 17       	cp	r25, r24
     27a:	88 f4       	brcc	.+34     	; 0x29e <isIn+0x2e>
     27c:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <boxX2>
     280:	89 17       	cp	r24, r25
     282:	78 f4       	brcc	.+30     	; 0x2a2 <isIn+0x32>
     284:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <curY>
     288:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <boxY1>
     28c:	89 17       	cp	r24, r25
     28e:	58 f4       	brcc	.+22     	; 0x2a6 <isIn+0x36>
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	20 91 fd 03 	lds	r18, 0x03FD	; 0x8003fd <boxY2>
     296:	92 17       	cp	r25, r18
     298:	38 f0       	brcs	.+14     	; 0x2a8 <isIn+0x38>
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	08 95       	ret
		return true;
		}else{
		return false;
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	08 95       	ret
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	08 95       	ret
     2a6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     2a8:	08 95       	ret

000002aa <__vector_1>:
SIGNAL(INT0_vect){
     2aa:	1f 92       	push	r1
     2ac:	0f 92       	push	r0
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	0f 92       	push	r0
     2b2:	11 24       	eor	r1, r1
     2b4:	0b b6       	in	r0, 0x3b	; 59
     2b6:	0f 92       	push	r0
     2b8:	2f 93       	push	r18
     2ba:	3f 93       	push	r19
     2bc:	4f 93       	push	r20
     2be:	5f 93       	push	r21
     2c0:	6f 93       	push	r22
     2c2:	7f 93       	push	r23
     2c4:	8f 93       	push	r24
     2c6:	9f 93       	push	r25
     2c8:	af 93       	push	r26
     2ca:	bf 93       	push	r27
     2cc:	ef 93       	push	r30
     2ce:	ff 93       	push	r31
	if(isIn()){
     2d0:	cf df       	rcall	.-98     	; 0x270 <isIn>
     2d2:	88 23       	and	r24, r24
     2d4:	39 f1       	breq	.+78     	; 0x324 <__vector_1+0x7a>
		S_Good();//buzzer 조금
     2d6:	c8 d1       	rcall	.+912    	; 0x668 <S_Good>
		creat_box();
     2d8:	0f df       	rcall	.-482    	; 0xf8 <creat_box>
     2da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <len>
		if(len>10){
     2de:	8b 30       	cpi	r24, 0x0B	; 11
     2e0:	20 f0       	brcs	.+8      	; 0x2ea <__vector_1+0x40>
     2e2:	83 50       	subi	r24, 0x03	; 3
			len-=3;
     2e4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <len>
     2e8:	08 c0       	rjmp	.+16     	; 0x2fa <__vector_1+0x50>
     2ea:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <phase>
		}else{
			phase++;
     2ee:	8f 5f       	subi	r24, 0xFF	; 255
     2f0:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <phase>
			if(phase>5){//3단계 통과하면 우승
     2f4:	86 30       	cpi	r24, 0x06	; 6
     2f6:	08 f0       	brcs	.+2      	; 0x2fa <__vector_1+0x50>
				screen_win();
     2f8:	6c df       	rcall	.-296    	; 0x1d2 <screen_win>
     2fa:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <timerCnt+0x1>
			}
		}
		timerCnt=0;//시간 카운트 0으로
     2fe:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <timerCnt>
     302:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <score>
		score++;
     306:	8f 5f       	subi	r24, 0xFF	; 255
     308:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <score>
     30c:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <phase>
		
		if(phase==1){//1단계는 5초 제한시간
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	21 f4       	brne	.+8      	; 0x31c <__vector_1+0x72>
     314:	85 e0       	ldi	r24, 0x05	; 5
			gameCnt=5;
     316:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <gameCnt>
     31a:	0a c0       	rjmp	.+20     	; 0x330 <__vector_1+0x86>
     31c:	83 e0       	ldi	r24, 0x03	; 3
		}else{
			gameCnt=3;//2,3단계는 3초 제한시간
     31e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <gameCnt>
     322:	06 c0       	rjmp	.+12     	; 0x330 <__vector_1+0x86>
		}
		
	}else{ //커서의 범위가 상자좌표 바깥일때
		SError();//buzzer 길게
     324:	ac d1       	rcall	.+856    	; 0x67e <SError>
		TCCR0=0x00;//타이머 멈춤
     326:	13 be       	out	0x33, r1	; 51
		screen_over(score); //게임오버 화면
     328:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <score>
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	23 df       	rcall	.-442    	; 0x176 <screen_over>
     330:	ff 91       	pop	r31
	}
}
     332:	ef 91       	pop	r30
     334:	bf 91       	pop	r27
     336:	af 91       	pop	r26
     338:	9f 91       	pop	r25
     33a:	8f 91       	pop	r24
     33c:	7f 91       	pop	r23
     33e:	6f 91       	pop	r22
     340:	5f 91       	pop	r21
     342:	4f 91       	pop	r20
     344:	3f 91       	pop	r19
     346:	2f 91       	pop	r18
     348:	0f 90       	pop	r0
     34a:	0b be       	out	0x3b, r0	; 59
     34c:	0f 90       	pop	r0
     34e:	0f be       	out	0x3f, r0	; 63
     350:	0f 90       	pop	r0
     352:	1f 90       	pop	r1
     354:	18 95       	reti

00000356 <ADC_init>:
     356:	16 b8       	out	0x06, r1	; 6
	}
}

void ADC_init(void){
	ADCSRA = 0x00; // adc를 초기화
	ADMUX = 0x00; // adc 인풋 셀렉
     358:	17 b8       	out	0x07, r1	; 7
	ACSR = 0x80;
     35a:	80 e8       	ldi	r24, 0x80	; 128
     35c:	88 b9       	out	0x08, r24	; 8
	ADCSRA = 0xc3;
     35e:	83 ec       	ldi	r24, 0xC3	; 195
     360:	86 b9       	out	0x06, r24	; 6
     362:	08 95       	ret

00000364 <Init_Timer0>:
}

void Init_Timer0(void){
	TCCR0=0x07;  //normal mode  1024
     364:	87 e0       	ldi	r24, 0x07	; 7
     366:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
     368:	12 be       	out	0x32, r1	; 50
	SREG=0x80;
     36a:	80 e8       	ldi	r24, 0x80	; 128
     36c:	8f bf       	out	0x3f, r24	; 63
	TIMSK=0x01;  //TOIE0=1; 타이머 오버플로우 허락 비트
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	87 bf       	out	0x37, r24	; 55
     372:	08 95       	ret

00000374 <Read_Adc_Data>:
}

unsigned int Read_Adc_Data(unsigned char adc_input){	//adc 읽어들이는 곳
	unsigned int adc = 0;
	ADCSRA = 0xc3; // conversion time 정함
     374:	93 ec       	ldi	r25, 0xC3	; 195
     376:	96 b9       	out	0x06, r25	; 6
	ADMUX = adc_input | ADC_AVCC_TYPE; //adc 사용한 설정
     378:	80 64       	ori	r24, 0x40	; 64
     37a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0x40; // ad 변환이 끝날때까지 기다림
     37c:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & 0x10) != 0x10);
     37e:	34 9b       	sbis	0x06, 4	; 6
     380:	fe cf       	rjmp	.-4      	; 0x37e <Read_Adc_Data+0xa>
	adc += ADCL + (ADCH*256);
     382:	24 b1       	in	r18, 0x04	; 4
     384:	85 b1       	in	r24, 0x05	; 5
	ADCSRA=0x00;
     386:	16 b8       	out	0x06, r1	; 6
	return adc;
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	98 2f       	mov	r25, r24
     38c:	88 27       	eor	r24, r24
}
     38e:	82 0f       	add	r24, r18
     390:	91 1d       	adc	r25, r1
     392:	08 95       	ret

00000394 <cursur>:
	boxY1 = (rand()%(126-len));
	boxY2 = boxY1+len;
}

void cursur(){
	Data_ADC3 = Read_Adc_Data(3) / 14; //3번 port 읽기
     394:	83 e0       	ldi	r24, 0x03	; 3
     396:	ee df       	rcall	.-36     	; 0x374 <Read_Adc_Data>
     398:	9c 01       	movw	r18, r24
     39a:	36 95       	lsr	r19
     39c:	27 95       	ror	r18
     39e:	a5 e2       	ldi	r26, 0x25	; 37
     3a0:	b9 e4       	ldi	r27, 0x49	; 73
     3a2:	20 d6       	rcall	.+3136   	; 0xfe4 <__umulhisi3>
     3a4:	96 95       	lsr	r25
     3a6:	87 95       	ror	r24
     3a8:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <Data_ADC3+0x1>
     3ac:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <Data_ADC3>
	Data_ADC4 = Read_Adc_Data(4) / 8;
     3b0:	84 e0       	ldi	r24, 0x04	; 4
     3b2:	e0 df       	rcall	.-64     	; 0x374 <Read_Adc_Data>
     3b4:	96 95       	lsr	r25
     3b6:	87 95       	ror	r24
     3b8:	96 95       	lsr	r25
     3ba:	87 95       	ror	r24
     3bc:	96 95       	lsr	r25
     3be:	87 95       	ror	r24
     3c0:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <__data_end+0x1>
     3c4:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <__data_end>
     3c8:	20 91 f7 03 	lds	r18, 0x03F7	; 0x8003f7 <phase>
	
	if(phase==5){//3단계일때 커서 속도를 느리게
     3cc:	25 30       	cpi	r18, 0x05	; 5
     3ce:	19 f4       	brne	.+6      	; 0x3d6 <cursur+0x42>
     3d0:	20 93 fe 03 	sts	0x03FE, r18	; 0x8003fe <speed>
		speed=5;
     3d4:	03 c0       	rjmp	.+6      	; 0x3dc <cursur+0x48>
     3d6:	27 e0       	ldi	r18, 0x07	; 7
	}else{
		speed=7;
     3d8:	20 93 fe 03 	sts	0x03FE, r18	; 0x8003fe <speed>
     3dc:	20 91 f4 03 	lds	r18, 0x03F4	; 0x8003f4 <Data_ADC3>
	}
	if(Data_ADC3<36){//조이스틱 위
     3e0:	30 91 f5 03 	lds	r19, 0x03F5	; 0x8003f5 <Data_ADC3+0x1>
     3e4:	24 32       	cpi	r18, 0x24	; 36
     3e6:	31 05       	cpc	r19, r1
     3e8:	40 f4       	brcc	.+16     	; 0x3fa <cursur+0x66>
     3ea:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <curX>
		curX-=speed;
     3ee:	30 91 fe 03 	lds	r19, 0x03FE	; 0x8003fe <speed>
     3f2:	23 1b       	sub	r18, r19
     3f4:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <curX>
     3f8:	0a c0       	rjmp	.+20     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3fa:	25 32       	cpi	r18, 0x25	; 37
		}else if(Data_ADC3>36){//조이스틱 아래
     3fc:	31 05       	cpc	r19, r1
     3fe:	38 f0       	brcs	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     400:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <curX>
		curX+=speed;
     404:	20 91 fe 03 	lds	r18, 0x03FE	; 0x8003fe <speed>
     408:	23 0f       	add	r18, r19
     40a:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <curX>
     40e:	80 34       	cpi	r24, 0x40	; 64
	}
	
	if(Data_ADC4>63){//조이스틱 왼쪽
     410:	91 05       	cpc	r25, r1
     412:	40 f0       	brcs	.+16     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     414:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <curY>
		curY-=speed;
     418:	90 91 fe 03 	lds	r25, 0x03FE	; 0x8003fe <speed>
     41c:	89 1b       	sub	r24, r25
     41e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <curY>
     422:	09 c0       	rjmp	.+18     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     424:	cf 97       	sbiw	r24, 0x3f	; 63
		}else if(Data_ADC4<63){//조이스틱 오른쪽
     426:	38 f4       	brcc	.+14     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     428:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <curY>
		curY+=speed;
     42c:	80 91 fe 03 	lds	r24, 0x03FE	; 0x8003fe <speed>
     430:	89 0f       	add	r24, r25
     432:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <curY>
     436:	42 e0       	ldi	r20, 0x02	; 2
	}
	
	GLCD_Circle_black(curX,curY,2);
     438:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <curY>
     43c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <curX>
     440:	10 c3       	rjmp	.+1568   	; 0xa62 <GLCD_Circle_black>
     442:	08 95       	ret

00000444 <screen_game>:
     444:	1f 93       	push	r17
	lcd_string(4,0, "*        BOX       *");
	lcd_string(5,0, "*      SHOTTER     *");
	lcd_string(6,0, "====================");
}

void screen_game(char cnt,char sco,char pha){//카운트 시간과 점수, 스테이지를 받음
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	18 2f       	mov	r17, r24
     44c:	d6 2f       	mov	r29, r22
     44e:	c4 2f       	mov	r28, r20
	if(pha==3){
     450:	43 30       	cpi	r20, 0x03	; 3
     452:	21 f0       	breq	.+8      	; 0x45c <screen_game+0x18>
		pha=2;
	}else if(pha==5){
     454:	45 30       	cpi	r20, 0x05	; 5
     456:	19 f4       	brne	.+6      	; 0x45e <screen_game+0x1a>
		pha=3;
     458:	c3 e0       	ldi	r28, 0x03	; 3
     45a:	01 c0       	rjmp	.+2      	; 0x45e <screen_game+0x1a>
	lcd_string(6,0, "====================");
}

void screen_game(char cnt,char sco,char pha){//카운트 시간과 점수, 스테이지를 받음
	if(pha==3){
		pha=2;
     45c:	c2 e0       	ldi	r28, 0x02	; 2
	}else if(pha==5){
		pha=3;
	}
	lcd_clear();
     45e:	6f d1       	rcall	.+734    	; 0x73e <lcd_clear>
	GLCD_Rectangle(9,0,53,127);
     460:	2f e7       	ldi	r18, 0x7F	; 127
     462:	45 e3       	ldi	r20, 0x35	; 53
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	89 e0       	ldi	r24, 0x09	; 9
	cursur();
     468:	de d2       	rcall	.+1468   	; 0xa26 <GLCD_Rectangle>
     46a:	94 df       	rcall	.-216    	; 0x394 <cursur>
	GLCD_Rectangle(boxX1,boxY1,boxX2,boxY2);
     46c:	20 91 fd 03 	lds	r18, 0x03FD	; 0x8003fd <boxY2>
     470:	40 91 fb 03 	lds	r20, 0x03FB	; 0x8003fb <boxX2>
     474:	60 91 fc 03 	lds	r22, 0x03FC	; 0x8003fc <boxY1>
     478:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <boxX1>
     47c:	d4 d2       	rcall	.+1448   	; 0xa26 <GLCD_Rectangle>
	lcd_string(0,0,"PLAY");
     47e:	4b ed       	ldi	r20, 0xDB	; 219
     480:	53 e0       	ldi	r21, 0x03	; 3
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	b9 d1       	rcall	.+882    	; 0x7fa <lcd_string>
	lcd_string(0,13,"STAGE");
     488:	40 ee       	ldi	r20, 0xE0	; 224
     48a:	53 e0       	ldi	r21, 0x03	; 3
     48c:	6d e0       	ldi	r22, 0x0D	; 13
     48e:	80 e0       	ldi	r24, 0x00	; 0
	lcd_xy(0,18);
     490:	b4 d1       	rcall	.+872    	; 0x7fa <lcd_string>
     492:	62 e1       	ldi	r22, 0x12	; 18
     494:	80 e0       	ldi	r24, 0x00	; 0
	GLCD_2DigitDecimal(pha);
     496:	6e d1       	rcall	.+732    	; 0x774 <lcd_xy>
     498:	8c 2f       	mov	r24, r28
	lcd_string(7,0, "Time");
     49a:	e4 d3       	rcall	.+1992   	; 0xc64 <GLCD_2DigitDecimal>
     49c:	46 ee       	ldi	r20, 0xE6	; 230
     49e:	53 e0       	ldi	r21, 0x03	; 3
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	87 e0       	ldi	r24, 0x07	; 7
	lcd_xy(7,4);
     4a4:	aa d1       	rcall	.+852    	; 0x7fa <lcd_string>
     4a6:	64 e0       	ldi	r22, 0x04	; 4
     4a8:	87 e0       	ldi	r24, 0x07	; 7
	GLCD_2DigitDecimal(cnt);
     4aa:	64 d1       	rcall	.+712    	; 0x774 <lcd_xy>
     4ac:	81 2f       	mov	r24, r17
	lcd_string(7,13, "Score");
     4ae:	da d3       	rcall	.+1972   	; 0xc64 <GLCD_2DigitDecimal>
     4b0:	4b ee       	ldi	r20, 0xEB	; 235
     4b2:	53 e0       	ldi	r21, 0x03	; 3
     4b4:	6d e0       	ldi	r22, 0x0D	; 13
     4b6:	87 e0       	ldi	r24, 0x07	; 7
     4b8:	a0 d1       	rcall	.+832    	; 0x7fa <lcd_string>
	lcd_xy(7,18);
     4ba:	62 e1       	ldi	r22, 0x12	; 18
     4bc:	87 e0       	ldi	r24, 0x07	; 7
     4be:	5a d1       	rcall	.+692    	; 0x774 <lcd_xy>
     4c0:	8d 2f       	mov	r24, r29
	GLCD_2DigitDecimal(sco);
     4c2:	d0 d3       	rcall	.+1952   	; 0xc64 <GLCD_2DigitDecimal>
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
}
     4c8:	1f 91       	pop	r17
     4ca:	08 95       	ret

000004cc <__vector_16>:
     4cc:	1f 92       	push	r1
     4ce:	0f 92       	push	r0
		TCCR0=0x00;//타이머 멈춤
		screen_over(score); //게임오버 화면
	}
}

ISR(TIMER0_OVF_vect){
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	0f 92       	push	r0
     4d4:	11 24       	eor	r1, r1
     4d6:	0b b6       	in	r0, 0x3b	; 59
     4d8:	0f 92       	push	r0
     4da:	2f 93       	push	r18
     4dc:	3f 93       	push	r19
     4de:	4f 93       	push	r20
     4e0:	5f 93       	push	r21
     4e2:	6f 93       	push	r22
     4e4:	7f 93       	push	r23
     4e6:	8f 93       	push	r24
     4e8:	9f 93       	push	r25
     4ea:	af 93       	push	r26
     4ec:	bf 93       	push	r27
     4ee:	ef 93       	push	r30
     4f0:	ff 93       	push	r31
	if(phase==0 || phase==2 || phase==4){
     4f2:	40 91 f7 03 	lds	r20, 0x03F7	; 0x8003f7 <phase>
     4f6:	44 23       	and	r20, r20
     4f8:	09 f4       	brne	.+2      	; 0x4fc <__vector_16+0x30>
     4fa:	53 c0       	rjmp	.+166    	; 0x5a2 <__vector_16+0xd6>
     4fc:	42 30       	cpi	r20, 0x02	; 2
     4fe:	09 f4       	brne	.+2      	; 0x502 <__vector_16+0x36>
     500:	45 c0       	rjmp	.+138    	; 0x58c <__vector_16+0xc0>
     502:	44 30       	cpi	r20, 0x04	; 4
     504:	c9 f4       	brne	.+50     	; 0x538 <__vector_16+0x6c>
     506:	42 c0       	rjmp	.+132    	; 0x58c <__vector_16+0xc0>
		if(!phase){
			screen_start();
		}else{
			screen_nextstage();
		}
		if(timerCnt==112){//2초동안 화면을 보여줌
     508:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <timerCnt>
     50c:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <timerCnt+0x1>
     510:	80 37       	cpi	r24, 0x70	; 112
     512:	91 05       	cpc	r25, r1
     514:	09 f0       	breq	.+2      	; 0x518 <__vector_16+0x4c>
     516:	50 c0       	rjmp	.+160    	; 0x5b8 <__vector_16+0xec>
			phase++;
     518:	80 91 f7 03 	lds	r24, 0x03F7	; 0x8003f7 <phase>
     51c:	8f 5f       	subi	r24, 0xFF	; 255
     51e:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <phase>
			timerCnt=0;
     522:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <timerCnt+0x1>
     526:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <timerCnt>
			creat_box();
     52a:	e6 dd       	rcall	.-1076   	; 0xf8 <creat_box>
			MelOn;
     52c:	e5 e6       	ldi	r30, 0x65	; 101
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	80 61       	ori	r24, 0x10	; 16
     534:	80 83       	st	Z, r24
     536:	40 c0       	rjmp	.+128    	; 0x5b8 <__vector_16+0xec>
		}
	}else{
		timerCnt++;
     538:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <timerCnt>
     53c:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <timerCnt+0x1>
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <timerCnt+0x1>
     546:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <timerCnt>
		if(timerCnt==14){//0.25초 마다(커서움직임때문에)
     54a:	0e 97       	sbiw	r24, 0x0e	; 14
     54c:	a9 f5       	brne	.+106    	; 0x5b8 <__vector_16+0xec>
			if(gameCnt>0){//1단계 : 5초 이내
     54e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <gameCnt>
     552:	88 23       	and	r24, r24
     554:	81 f0       	breq	.+32     	; 0x576 <__vector_16+0xaa>
				screen_game(gameCnt,score,phase);
     556:	60 91 f8 03 	lds	r22, 0x03F8	; 0x8003f8 <score>
     55a:	74 df       	rcall	.-280    	; 0x444 <screen_game>
				timeflag++;
     55c:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <timeflag>
     560:	8f 5f       	subi	r24, 0xFF	; 255
     562:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <timeflag>
				if(timeflag%4 == 0){
     566:	83 70       	andi	r24, 0x03	; 3
     568:	61 f4       	brne	.+24     	; 0x582 <__vector_16+0xb6>
					gameCnt--;
     56a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <gameCnt>
     56e:	81 50       	subi	r24, 0x01	; 1
     570:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <gameCnt>
				}
			}else if(gameCnt==0){//제한시간 안에 클릭 못할경우
				TCCR0=0x00;//타이머 멈춤
     574:	06 c0       	rjmp	.+12     	; 0x582 <__vector_16+0xb6>
				SError();
     576:	13 be       	out	0x33, r1	; 51
     578:	82 d0       	rcall	.+260    	; 0x67e <SError>
				screen_over(score);
     57a:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <score>
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	fa dd       	rcall	.-1036   	; 0x176 <screen_over>
			}
			timerCnt=0;
     582:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <timerCnt+0x1>
     586:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <timerCnt>
		}
	}
}
     58a:	16 c0       	rjmp	.+44     	; 0x5b8 <__vector_16+0xec>
	}
}

ISR(TIMER0_OVF_vect){
	if(phase==0 || phase==2 || phase==4){
		timerCnt++;
     58c:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <timerCnt>
     590:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <timerCnt+0x1>
     594:	01 96       	adiw	r24, 0x01	; 1
     596:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <timerCnt+0x1>
     59a:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <timerCnt>
		if(!phase){
			screen_start();
		}else{
			screen_nextstage();
     59e:	45 de       	rcall	.-886    	; 0x22a <screen_nextstage>
     5a0:	b3 cf       	rjmp	.-154    	; 0x508 <__vector_16+0x3c>
	}
}

ISR(TIMER0_OVF_vect){
	if(phase==0 || phase==2 || phase==4){
		timerCnt++;
     5a2:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <timerCnt>
     5a6:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <timerCnt+0x1>
     5aa:	01 96       	adiw	r24, 0x01	; 1
     5ac:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <timerCnt+0x1>
     5b0:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <timerCnt>
		if(!phase){
			screen_start();
     5b4:	c0 dd       	rcall	.-1152   	; 0x136 <screen_start>
     5b6:	a8 cf       	rjmp	.-176    	; 0x508 <__vector_16+0x3c>
				screen_over(score);
			}
			timerCnt=0;
		}
	}
}
     5b8:	ff 91       	pop	r31
     5ba:	ef 91       	pop	r30
     5bc:	bf 91       	pop	r27
     5be:	af 91       	pop	r26
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	7f 91       	pop	r23
     5c6:	6f 91       	pop	r22
     5c8:	5f 91       	pop	r21
     5ca:	4f 91       	pop	r20
     5cc:	3f 91       	pop	r19
     5ce:	2f 91       	pop	r18
     5d0:	0f 90       	pop	r0
     5d2:	0b be       	out	0x3b, r0	; 59
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <init_devices>:
	adc += ADCL + (ADCH*256);
	ADCSRA=0x00;
	return adc;
}
void init_devices(void){
	cli();
     5de:	f8 94       	cli
	Port_init();
     5e0:	74 dd       	rcall	.-1304   	; 0xca <Port_init>
	ADC_init();
     5e2:	b9 de       	rcall	.-654    	; 0x356 <ADC_init>
	lcd_init();
     5e4:	be d0       	rcall	.+380    	; 0x762 <lcd_init>
	Init_Timer0();
     5e6:	be de       	rcall	.-644    	; 0x364 <Init_Timer0>
     5e8:	81 dd       	rcall	.-1278   	; 0xec <interrupt_init>
	interrupt_init();
     5ea:	78 94       	sei
     5ec:	08 95       	ret

000005ee <main>:
	sei();
     5ee:	f7 df       	rcall	.-18     	; 0x5de <init_devices>
     5f0:	ff cf       	rjmp	.-2      	; 0x5f0 <main+0x2>

000005f2 <delay_us_Melody>:
#define     Buzzer_Pin      4
#define     MelOn    SETBIT(Buzzer_Port, Buzzer_Pin)
#define     MelOff   CLEARBIT(Buzzer_Port, Buzzer_Pin)

void delay_us_Melody(int data)
{	int i;	for(i=0;i<data;i++)	{		_delay_us(1);	}}
     5f2:	18 16       	cp	r1, r24
     5f4:	19 06       	cpc	r1, r25
     5f6:	5c f4       	brge	.+22     	; 0x60e <delay_us_Melody+0x1c>
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5fc:	45 e0       	ldi	r20, 0x05	; 5
     5fe:	4a 95       	dec	r20
     600:	f1 f7       	brne	.-4      	; 0x5fe <delay_us_Melody+0xc>
     602:	00 00       	nop
     604:	2f 5f       	subi	r18, 0xFF	; 255
     606:	3f 4f       	sbci	r19, 0xFF	; 255
     608:	82 17       	cp	r24, r18
     60a:	93 07       	cpc	r25, r19
     60c:	b9 f7       	brne	.-18     	; 0x5fc <delay_us_Melody+0xa>
     60e:	08 95       	ret

00000610 <Sound>:

void Sound(unsigned int ch, unsigned int time)
{	
     610:	ef 92       	push	r14
     612:	ff 92       	push	r15
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	7b 01       	movw	r14, r22
    unsigned int tim;
	tim=ch;
	tim=tim*1000/time;
     61e:	28 ee       	ldi	r18, 0xE8	; 232
     620:	33 e0       	ldi	r19, 0x03	; 3
     622:	ac 01       	movw	r20, r24
     624:	42 9f       	mul	r20, r18
     626:	c0 01       	movw	r24, r0
     628:	43 9f       	mul	r20, r19
     62a:	90 0d       	add	r25, r0
     62c:	52 9f       	mul	r21, r18
     62e:	90 0d       	add	r25, r0
     630:	11 24       	eor	r1, r1
     632:	b1 d4       	rcall	.+2402   	; 0xf96 <__udivmodhi4>
	while(tim--)
     634:	61 15       	cp	r22, r1
     636:	71 05       	cpc	r23, r1
     638:	81 f0       	breq	.+32     	; 0x65a <Sound+0x4a>
     63a:	8b 01       	movw	r16, r22
	{
		MelOn;
     63c:	c5 e6       	ldi	r28, 0x65	; 101
     63e:	d0 e0       	ldi	r29, 0x00	; 0
     640:	88 81       	ld	r24, Y
     642:	80 61       	ori	r24, 0x10	; 16
     644:	88 83       	st	Y, r24
		delay_us_Melody(time);
     646:	c7 01       	movw	r24, r14
     648:	d4 df       	rcall	.-88     	; 0x5f2 <delay_us_Melody>
		MelOff;
     64a:	88 81       	ld	r24, Y
     64c:	8f 7e       	andi	r24, 0xEF	; 239
		delay_us_Melody(time);
     64e:	88 83       	st	Y, r24
     650:	c7 01       	movw	r24, r14
     652:	cf df       	rcall	.-98     	; 0x5f2 <delay_us_Melody>
     654:	01 50       	subi	r16, 0x01	; 1
     656:	11 09       	sbc	r17, r1
void Sound(unsigned int ch, unsigned int time)
{	
    unsigned int tim;
	tim=ch;
	tim=tim*1000/time;
	while(tim--)
     658:	99 f7       	brne	.-26     	; 0x640 <Sound+0x30>
		delay_us_Melody(time);
		MelOff;
		delay_us_Melody(time);
	}

}
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	ff 90       	pop	r15
     664:	ef 90       	pop	r14
     666:	08 95       	ret

00000668 <S_Good>:

void S_Good()        
{		Sound(BB,BDo);    
     668:	68 ec       	ldi	r22, 0xC8	; 200
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	83 e2       	ldi	r24, 0x23	; 35
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	cf df       	rcall	.-98     	; 0x610 <Sound>
		Sound(BB,BSo);          
     672:	66 e8       	ldi	r22, 0x86	; 134
     674:	70 e0       	ldi	r23, 0x00	; 0
     676:	83 e2       	ldi	r24, 0x23	; 35
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	ca cf       	rjmp	.-108    	; 0x610 <Sound>
     67c:	08 95       	ret

0000067e <SError>:
}
void SError(void)    
{     
	Sound(SB,LDo);                            
     67e:	6b e8       	ldi	r22, 0x8B	; 139
     680:	71 e0       	ldi	r23, 0x01	; 1
     682:	8e e1       	ldi	r24, 0x1E	; 30
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	c4 cf       	rjmp	.-120    	; 0x610 <Sound>
     688:	08 95       	ret

0000068a <cmndl>:
			y = y1 + (unsigned char)s;
			GLCD_Dot(x,y);
			y = y1 - (unsigned char)s;
			GLCD_Dot(x,y);
		}
	}
     68a:	1d 9a       	sbi	0x03, 5	; 3
     68c:	91 e3       	ldi	r25, 0x31	; 49
     68e:	9a 95       	dec	r25
     690:	f1 f7       	brne	.-4      	; 0x68e <cmndl+0x4>
     692:	00 00       	nop
     694:	1c 98       	cbi	0x03, 4	; 3
     696:	1e 98       	cbi	0x03, 6	; 3
     698:	1f 9a       	sbi	0x03, 7	; 3
     69a:	8b bb       	out	0x1b, r24	; 27
     69c:	81 e3       	ldi	r24, 0x31	; 49
     69e:	8a 95       	dec	r24
     6a0:	f1 f7       	brne	.-4      	; 0x69e <cmndl+0x14>
     6a2:	00 00       	nop
     6a4:	1d 98       	cbi	0x03, 5	; 3
     6a6:	08 95       	ret

000006a8 <cmndr>:
     6a8:	1d 9a       	sbi	0x03, 5	; 3
     6aa:	91 e3       	ldi	r25, 0x31	; 49
     6ac:	9a 95       	dec	r25
     6ae:	f1 f7       	brne	.-4      	; 0x6ac <cmndr+0x4>
     6b0:	00 00       	nop
     6b2:	1c 98       	cbi	0x03, 4	; 3
     6b4:	1e 9a       	sbi	0x03, 6	; 3
     6b6:	1f 98       	cbi	0x03, 7	; 3
     6b8:	8b bb       	out	0x1b, r24	; 27
     6ba:	81 e3       	ldi	r24, 0x31	; 49
     6bc:	8a 95       	dec	r24
     6be:	f1 f7       	brne	.-4      	; 0x6bc <cmndr+0x14>
     6c0:	00 00       	nop
     6c2:	1d 98       	cbi	0x03, 5	; 3
     6c4:	08 95       	ret

000006c6 <cmnda>:
     6c6:	1d 9a       	sbi	0x03, 5	; 3
     6c8:	91 e3       	ldi	r25, 0x31	; 49
     6ca:	9a 95       	dec	r25
     6cc:	f1 f7       	brne	.-4      	; 0x6ca <cmnda+0x4>
     6ce:	00 00       	nop
     6d0:	1c 98       	cbi	0x03, 4	; 3
     6d2:	1e 9a       	sbi	0x03, 6	; 3
     6d4:	1f 9a       	sbi	0x03, 7	; 3
     6d6:	8b bb       	out	0x1b, r24	; 27
     6d8:	81 e3       	ldi	r24, 0x31	; 49
     6da:	8a 95       	dec	r24
     6dc:	f1 f7       	brne	.-4      	; 0x6da <cmnda+0x14>
     6de:	00 00       	nop
     6e0:	1d 98       	cbi	0x03, 5	; 3
     6e2:	08 95       	ret

000006e4 <datal>:
     6e4:	1d 9a       	sbi	0x03, 5	; 3
     6e6:	91 e3       	ldi	r25, 0x31	; 49
     6e8:	9a 95       	dec	r25
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <datal+0x4>
     6ec:	00 00       	nop
     6ee:	1c 9a       	sbi	0x03, 4	; 3
     6f0:	1e 98       	cbi	0x03, 6	; 3
     6f2:	1f 9a       	sbi	0x03, 7	; 3
     6f4:	8b bb       	out	0x1b, r24	; 27
     6f6:	81 e3       	ldi	r24, 0x31	; 49
     6f8:	8a 95       	dec	r24
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <datal+0x14>
     6fc:	00 00       	nop
     6fe:	1d 98       	cbi	0x03, 5	; 3
     700:	08 95       	ret

00000702 <datar>:
     702:	1d 9a       	sbi	0x03, 5	; 3
     704:	91 e3       	ldi	r25, 0x31	; 49
     706:	9a 95       	dec	r25
     708:	f1 f7       	brne	.-4      	; 0x706 <datar+0x4>
     70a:	00 00       	nop
     70c:	1c 9a       	sbi	0x03, 4	; 3
     70e:	1e 9a       	sbi	0x03, 6	; 3
     710:	1f 98       	cbi	0x03, 7	; 3
     712:	8b bb       	out	0x1b, r24	; 27
     714:	81 e3       	ldi	r24, 0x31	; 49
     716:	8a 95       	dec	r24
     718:	f1 f7       	brne	.-4      	; 0x716 <datar+0x14>
     71a:	00 00       	nop
     71c:	1d 98       	cbi	0x03, 5	; 3
     71e:	08 95       	ret

00000720 <dataa>:
     720:	1d 9a       	sbi	0x03, 5	; 3
     722:	91 e3       	ldi	r25, 0x31	; 49
     724:	9a 95       	dec	r25
     726:	f1 f7       	brne	.-4      	; 0x724 <dataa+0x4>
     728:	00 00       	nop
     72a:	1c 9a       	sbi	0x03, 4	; 3
     72c:	1e 9a       	sbi	0x03, 6	; 3
     72e:	1f 9a       	sbi	0x03, 7	; 3
     730:	8b bb       	out	0x1b, r24	; 27
     732:	81 e3       	ldi	r24, 0x31	; 49
     734:	8a 95       	dec	r24
     736:	f1 f7       	brne	.-4      	; 0x734 <dataa+0x14>
     738:	00 00       	nop
     73a:	1d 98       	cbi	0x03, 5	; 3
     73c:	08 95       	ret

0000073e <lcd_clear>:
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	d8 eb       	ldi	r29, 0xB8	; 184
     744:	8d 2f       	mov	r24, r29
     746:	bf df       	rcall	.-130    	; 0x6c6 <cmnda>
     748:	80 e4       	ldi	r24, 0x40	; 64
     74a:	bd df       	rcall	.-134    	; 0x6c6 <cmnda>
     74c:	c0 e4       	ldi	r28, 0x40	; 64
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	e7 df       	rcall	.-50     	; 0x720 <dataa>
     752:	c1 50       	subi	r28, 0x01	; 1
     754:	e1 f7       	brne	.-8      	; 0x74e <lcd_clear+0x10>
     756:	df 5f       	subi	r29, 0xFF	; 255
     758:	d0 3c       	cpi	r29, 0xC0	; 192
     75a:	a1 f7       	brne	.-24     	; 0x744 <lcd_clear+0x6>
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <lcd_init>:
     762:	8f e3       	ldi	r24, 0x3F	; 63
     764:	b0 df       	rcall	.-160    	; 0x6c6 <cmnda>
     766:	80 ec       	ldi	r24, 0xC0	; 192
     768:	ae df       	rcall	.-164    	; 0x6c6 <cmnda>
     76a:	88 eb       	ldi	r24, 0xB8	; 184
     76c:	ac df       	rcall	.-168    	; 0x6c6 <cmnda>
     76e:	80 e4       	ldi	r24, 0x40	; 64
     770:	aa cf       	rjmp	.-172    	; 0x6c6 <cmnda>
     772:	08 95       	ret

00000774 <lcd_xy>:
     774:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <xchar>
     778:	60 93 03 08 	sts	0x0803, r22	; 0x800803 <ychar>
     77c:	88 54       	subi	r24, 0x48	; 72
     77e:	a3 df       	rcall	.-186    	; 0x6c6 <cmnda>
     780:	80 91 03 08 	lds	r24, 0x0803	; 0x800803 <ychar>
     784:	8a 30       	cpi	r24, 0x0A	; 10
     786:	38 f4       	brcc	.+14     	; 0x796 <lcd_xy+0x22>
     788:	98 2f       	mov	r25, r24
     78a:	99 0f       	add	r25, r25
     78c:	89 0f       	add	r24, r25
     78e:	88 0f       	add	r24, r24
     790:	8c 5b       	subi	r24, 0xBC	; 188
     792:	7b cf       	rjmp	.-266    	; 0x68a <cmndl>
     794:	08 95       	ret
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0a 97       	sbiw	r24, 0x0a	; 10
     79a:	98 2f       	mov	r25, r24
     79c:	99 0f       	add	r25, r25
     79e:	89 0f       	add	r24, r25
     7a0:	88 0f       	add	r24, r24
     7a2:	80 5c       	subi	r24, 0xC0	; 192
     7a4:	81 cf       	rjmp	.-254    	; 0x6a8 <cmndr>
     7a6:	08 95       	ret

000007a8 <lcd_char>:
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	ec 01       	movw	r28, r24
     7b2:	cc 0f       	add	r28, r28
     7b4:	dd 1f       	adc	r29, r29
     7b6:	cc 0f       	add	r28, r28
     7b8:	dd 1f       	adc	r29, r29
     7ba:	8c 0f       	add	r24, r28
     7bc:	9d 1f       	adc	r25, r29
     7be:	ec 01       	movw	r28, r24
     7c0:	c8 59       	subi	r28, 0x98	; 152
     7c2:	df 4f       	sbci	r29, 0xFF	; 255
     7c4:	15 e0       	ldi	r17, 0x05	; 5
     7c6:	80 91 03 08 	lds	r24, 0x0803	; 0x800803 <ychar>
     7ca:	8a 30       	cpi	r24, 0x0A	; 10
     7cc:	18 f4       	brcc	.+6      	; 0x7d4 <lcd_char+0x2c>
     7ce:	88 81       	ld	r24, Y
     7d0:	89 df       	rcall	.-238    	; 0x6e4 <datal>
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <lcd_char+0x30>
     7d4:	88 81       	ld	r24, Y
     7d6:	95 df       	rcall	.-214    	; 0x702 <datar>
     7d8:	11 50       	subi	r17, 0x01	; 1
     7da:	21 96       	adiw	r28, 0x01	; 1
     7dc:	11 11       	cpse	r17, r1
     7de:	f3 cf       	rjmp	.-26     	; 0x7c6 <lcd_char+0x1e>
     7e0:	80 91 03 08 	lds	r24, 0x0803	; 0x800803 <ychar>
     7e4:	8a 30       	cpi	r24, 0x0A	; 10
     7e6:	18 f4       	brcc	.+6      	; 0x7ee <lcd_char+0x46>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	7c df       	rcall	.-264    	; 0x6e4 <datal>
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <lcd_char+0x4a>
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	88 df       	rcall	.-240    	; 0x702 <datar>
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	1f 91       	pop	r17
     7f8:	08 95       	ret

000007fa <lcd_string>:
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	ea 01       	movw	r28, r20
     800:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <xchar>
     804:	60 93 03 08 	sts	0x0803, r22	; 0x800803 <ychar>
     808:	b5 df       	rcall	.-150    	; 0x774 <lcd_xy>
     80a:	88 81       	ld	r24, Y
     80c:	88 23       	and	r24, r24
     80e:	81 f0       	breq	.+32     	; 0x830 <lcd_string+0x36>
     810:	80 91 03 08 	lds	r24, 0x0803	; 0x800803 <ychar>
     814:	8a 30       	cpi	r24, 0x0A	; 10
     816:	11 f4       	brne	.+4      	; 0x81c <lcd_string+0x22>
     818:	80 e4       	ldi	r24, 0x40	; 64
     81a:	46 df       	rcall	.-372    	; 0x6a8 <cmndr>
     81c:	89 91       	ld	r24, Y+
     81e:	c4 df       	rcall	.-120    	; 0x7a8 <lcd_char>
     820:	80 91 03 08 	lds	r24, 0x0803	; 0x800803 <ychar>
     824:	8f 5f       	subi	r24, 0xFF	; 255
     826:	80 93 03 08 	sts	0x0803, r24	; 0x800803 <ychar>
     82a:	88 81       	ld	r24, Y
     82c:	81 11       	cpse	r24, r1
     82e:	f0 cf       	rjmp	.-32     	; 0x810 <lcd_string+0x16>
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <GLCD_Axis_xy>:
     836:	cf 93       	push	r28
     838:	c6 2f       	mov	r28, r22
     83a:	88 54       	subi	r24, 0x48	; 72
     83c:	44 df       	rcall	.-376    	; 0x6c6 <cmnda>
     83e:	c0 34       	cpi	r28, 0x40	; 64
     840:	20 f4       	brcc	.+8      	; 0x84a <GLCD_Axis_xy+0x14>
     842:	80 e4       	ldi	r24, 0x40	; 64
     844:	8c 0f       	add	r24, r28
     846:	21 df       	rcall	.-446    	; 0x68a <cmndl>
     848:	02 c0       	rjmp	.+4      	; 0x84e <GLCD_Axis_xy+0x18>
     84a:	8c 2f       	mov	r24, r28
     84c:	2d df       	rcall	.-422    	; 0x6a8 <cmndr>
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <GLCD_Dot>:
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	80 34       	cpi	r24, 0x40	; 64
     85e:	08 f0       	brcs	.+2      	; 0x862 <GLCD_Dot+0x10>
     860:	54 c0       	rjmp	.+168    	; 0x90a <GLCD_Dot+0xb8>
     862:	66 23       	and	r22, r22
     864:	0c f4       	brge	.+2      	; 0x868 <GLCD_Dot+0x16>
     866:	51 c0       	rjmp	.+162    	; 0x90a <GLCD_Dot+0xb8>
     868:	28 2f       	mov	r18, r24
     86a:	26 95       	lsr	r18
     86c:	26 95       	lsr	r18
     86e:	26 95       	lsr	r18
     870:	98 2f       	mov	r25, r24
     872:	97 70       	andi	r25, 0x07	; 7
     874:	71 f0       	breq	.+28     	; 0x892 <GLCD_Dot+0x40>
     876:	91 30       	cpi	r25, 0x01	; 1
     878:	71 f0       	breq	.+28     	; 0x896 <GLCD_Dot+0x44>
     87a:	92 30       	cpi	r25, 0x02	; 2
     87c:	71 f0       	breq	.+28     	; 0x89a <GLCD_Dot+0x48>
     87e:	93 30       	cpi	r25, 0x03	; 3
     880:	71 f0       	breq	.+28     	; 0x89e <GLCD_Dot+0x4c>
     882:	94 30       	cpi	r25, 0x04	; 4
     884:	71 f0       	breq	.+28     	; 0x8a2 <GLCD_Dot+0x50>
     886:	95 30       	cpi	r25, 0x05	; 5
     888:	71 f0       	breq	.+28     	; 0x8a6 <GLCD_Dot+0x54>
     88a:	96 30       	cpi	r25, 0x06	; 6
     88c:	71 f0       	breq	.+28     	; 0x8aa <GLCD_Dot+0x58>
     88e:	90 e8       	ldi	r25, 0x80	; 128
     890:	0d c0       	rjmp	.+26     	; 0x8ac <GLCD_Dot+0x5a>
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	0b c0       	rjmp	.+22     	; 0x8ac <GLCD_Dot+0x5a>
     896:	92 e0       	ldi	r25, 0x02	; 2
     898:	09 c0       	rjmp	.+18     	; 0x8ac <GLCD_Dot+0x5a>
     89a:	94 e0       	ldi	r25, 0x04	; 4
     89c:	07 c0       	rjmp	.+14     	; 0x8ac <GLCD_Dot+0x5a>
     89e:	98 e0       	ldi	r25, 0x08	; 8
     8a0:	05 c0       	rjmp	.+10     	; 0x8ac <GLCD_Dot+0x5a>
     8a2:	90 e1       	ldi	r25, 0x10	; 16
     8a4:	03 c0       	rjmp	.+6      	; 0x8ac <GLCD_Dot+0x5a>
     8a6:	90 e2       	ldi	r25, 0x20	; 32
     8a8:	01 c0       	rjmp	.+2      	; 0x8ac <GLCD_Dot+0x5a>
     8aa:	90 e4       	ldi	r25, 0x40	; 64
     8ac:	c6 2f       	mov	r28, r22
     8ae:	02 2f       	mov	r16, r18
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	e6 2e       	mov	r14, r22
     8b4:	f1 2c       	mov	r15, r1
     8b6:	f8 01       	movw	r30, r16
     8b8:	f6 95       	lsr	r31
     8ba:	fe 2f       	mov	r31, r30
     8bc:	ee 27       	eor	r30, r30
     8be:	f7 95       	ror	r31
     8c0:	e7 95       	ror	r30
     8c2:	ed 5f       	subi	r30, 0xFD	; 253
     8c4:	fb 4f       	sbci	r31, 0xFB	; 251
     8c6:	ee 0d       	add	r30, r14
     8c8:	ff 1d       	adc	r31, r15
     8ca:	80 81       	ld	r24, Z
     8cc:	98 2b       	or	r25, r24
     8ce:	90 83       	st	Z, r25
     8d0:	82 2f       	mov	r24, r18
     8d2:	b1 df       	rcall	.-158    	; 0x836 <GLCD_Axis_xy>
     8d4:	c0 34       	cpi	r28, 0x40	; 64
     8d6:	68 f4       	brcc	.+26     	; 0x8f2 <GLCD_Dot+0xa0>
     8d8:	16 95       	lsr	r17
     8da:	10 2f       	mov	r17, r16
     8dc:	00 27       	eor	r16, r16
     8de:	17 95       	ror	r17
     8e0:	07 95       	ror	r16
     8e2:	0d 5f       	subi	r16, 0xFD	; 253
     8e4:	1b 4f       	sbci	r17, 0xFB	; 251
     8e6:	f8 01       	movw	r30, r16
     8e8:	ee 0d       	add	r30, r14
     8ea:	ff 1d       	adc	r31, r15
     8ec:	80 81       	ld	r24, Z
     8ee:	fa de       	rcall	.-524    	; 0x6e4 <datal>
     8f0:	0c c0       	rjmp	.+24     	; 0x90a <GLCD_Dot+0xb8>
     8f2:	16 95       	lsr	r17
     8f4:	10 2f       	mov	r17, r16
     8f6:	00 27       	eor	r16, r16
     8f8:	17 95       	ror	r17
     8fa:	07 95       	ror	r16
     8fc:	0d 5f       	subi	r16, 0xFD	; 253
     8fe:	1b 4f       	sbci	r17, 0xFB	; 251
     900:	f8 01       	movw	r30, r16
     902:	ee 0d       	add	r30, r14
     904:	ff 1d       	adc	r31, r15
     906:	80 81       	ld	r24, Z
     908:	fc de       	rcall	.-520    	; 0x702 <datar>
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	08 95       	ret

00000916 <GLCD_Line>:
     916:	8f 92       	push	r8
     918:	9f 92       	push	r9
     91a:	af 92       	push	r10
     91c:	bf 92       	push	r11
     91e:	cf 92       	push	r12
     920:	df 92       	push	r13
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	62 17       	cp	r22, r18
     930:	09 f4       	brne	.+2      	; 0x934 <GLCD_Line+0x1e>
     932:	47 c0       	rjmp	.+142    	; 0x9c2 <GLCD_Line+0xac>
     934:	62 17       	cp	r22, r18
     936:	18 f5       	brcc	.+70     	; 0x97e <GLCD_Line+0x68>
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	02 2f       	mov	r16, r18
     93c:	10 e0       	ldi	r17, 0x00	; 0
     93e:	06 17       	cp	r16, r22
     940:	17 07       	cpc	r17, r23
     942:	0c f4       	brge	.+2      	; 0x946 <GLCD_Line+0x30>
     944:	63 c0       	rjmp	.+198    	; 0xa0c <GLCD_Line+0xf6>
     946:	c8 2f       	mov	r28, r24
     948:	d0 e0       	ldi	r29, 0x00	; 0
     94a:	c4 2e       	mov	r12, r20
     94c:	d1 2c       	mov	r13, r1
     94e:	cc 1a       	sub	r12, r28
     950:	dd 0a       	sbc	r13, r29
     952:	4b 01       	movw	r8, r22
     954:	e1 2c       	mov	r14, r1
     956:	f1 2c       	mov	r15, r1
     958:	58 01       	movw	r10, r16
     95a:	a6 1a       	sub	r10, r22
     95c:	b7 0a       	sbc	r11, r23
     95e:	c7 01       	movw	r24, r14
     960:	b5 01       	movw	r22, r10
     962:	2d d3       	rcall	.+1626   	; 0xfbe <__divmodhi4>
     964:	86 2f       	mov	r24, r22
     966:	68 2d       	mov	r22, r8
     968:	8c 0f       	add	r24, r28
     96a:	73 df       	rcall	.-282    	; 0x852 <GLCD_Dot>
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	88 1a       	sub	r8, r24
     970:	98 0a       	sbc	r9, r24
     972:	ec 0c       	add	r14, r12
     974:	fd 1c       	adc	r15, r13
     976:	08 15       	cp	r16, r8
     978:	19 05       	cpc	r17, r9
     97a:	8c f7       	brge	.-30     	; 0x95e <GLCD_Line+0x48>
     97c:	47 c0       	rjmp	.+142    	; 0xa0c <GLCD_Line+0xf6>
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	02 2f       	mov	r16, r18
     982:	10 e0       	ldi	r17, 0x00	; 0
     984:	60 17       	cp	r22, r16
     986:	71 07       	cpc	r23, r17
     988:	0c f4       	brge	.+2      	; 0x98c <GLCD_Line+0x76>
     98a:	40 c0       	rjmp	.+128    	; 0xa0c <GLCD_Line+0xf6>
     98c:	c8 2f       	mov	r28, r24
     98e:	d0 e0       	ldi	r29, 0x00	; 0
     990:	5e 01       	movw	r10, r28
     992:	a4 1a       	sub	r10, r20
     994:	b1 08       	sbc	r11, r1
     996:	4b 01       	movw	r8, r22
     998:	e1 2c       	mov	r14, r1
     99a:	f1 2c       	mov	r15, r1
     99c:	68 01       	movw	r12, r16
     99e:	c6 1a       	sub	r12, r22
     9a0:	d7 0a       	sbc	r13, r23
     9a2:	c7 01       	movw	r24, r14
     9a4:	b6 01       	movw	r22, r12
     9a6:	0b d3       	rcall	.+1558   	; 0xfbe <__divmodhi4>
     9a8:	86 2f       	mov	r24, r22
     9aa:	68 2d       	mov	r22, r8
     9ac:	8c 0f       	add	r24, r28
     9ae:	51 df       	rcall	.-350    	; 0x852 <GLCD_Dot>
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	88 1a       	sub	r8, r24
     9b4:	91 08       	sbc	r9, r1
     9b6:	ea 0c       	add	r14, r10
     9b8:	fb 1c       	adc	r15, r11
     9ba:	80 16       	cp	r8, r16
     9bc:	91 06       	cpc	r9, r17
     9be:	8c f7       	brge	.-30     	; 0x9a2 <GLCD_Line+0x8c>
     9c0:	25 c0       	rjmp	.+74     	; 0xa0c <GLCD_Line+0xf6>
     9c2:	84 17       	cp	r24, r20
     9c4:	11 f1       	breq	.+68     	; 0xa0a <GLCD_Line+0xf4>
     9c6:	84 17       	cp	r24, r20
     9c8:	80 f4       	brcc	.+32     	; 0x9ea <GLCD_Line+0xd4>
     9ca:	c8 2f       	mov	r28, r24
     9cc:	d0 e0       	ldi	r29, 0x00	; 0
     9ce:	e4 2e       	mov	r14, r20
     9d0:	f1 2c       	mov	r15, r1
     9d2:	ec 16       	cp	r14, r28
     9d4:	fd 06       	cpc	r15, r29
     9d6:	d4 f0       	brlt	.+52     	; 0xa0c <GLCD_Line+0xf6>
     9d8:	16 2f       	mov	r17, r22
     9da:	61 2f       	mov	r22, r17
     9dc:	8c 2f       	mov	r24, r28
     9de:	39 df       	rcall	.-398    	; 0x852 <GLCD_Dot>
     9e0:	21 96       	adiw	r28, 0x01	; 1
     9e2:	ec 16       	cp	r14, r28
     9e4:	fd 06       	cpc	r15, r29
     9e6:	cc f7       	brge	.-14     	; 0x9da <GLCD_Line+0xc4>
     9e8:	11 c0       	rjmp	.+34     	; 0xa0c <GLCD_Line+0xf6>
     9ea:	c8 2f       	mov	r28, r24
     9ec:	d0 e0       	ldi	r29, 0x00	; 0
     9ee:	e4 2e       	mov	r14, r20
     9f0:	f1 2c       	mov	r15, r1
     9f2:	ce 15       	cp	r28, r14
     9f4:	df 05       	cpc	r29, r15
     9f6:	54 f0       	brlt	.+20     	; 0xa0c <GLCD_Line+0xf6>
     9f8:	16 2f       	mov	r17, r22
     9fa:	61 2f       	mov	r22, r17
     9fc:	8c 2f       	mov	r24, r28
     9fe:	29 df       	rcall	.-430    	; 0x852 <GLCD_Dot>
     a00:	21 97       	sbiw	r28, 0x01	; 1
     a02:	ce 15       	cp	r28, r14
     a04:	df 05       	cpc	r29, r15
     a06:	cc f7       	brge	.-14     	; 0x9fa <GLCD_Line+0xe4>
     a08:	01 c0       	rjmp	.+2      	; 0xa0c <GLCD_Line+0xf6>
     a0a:	23 df       	rcall	.-442    	; 0x852 <GLCD_Dot>
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	ff 90       	pop	r15
     a16:	ef 90       	pop	r14
     a18:	df 90       	pop	r13
     a1a:	cf 90       	pop	r12
     a1c:	bf 90       	pop	r11
     a1e:	af 90       	pop	r10
     a20:	9f 90       	pop	r9
     a22:	8f 90       	pop	r8
     a24:	08 95       	ret

00000a26 <GLCD_Rectangle>:
     a26:	0f 93       	push	r16
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	c8 2f       	mov	r28, r24
     a30:	06 2f       	mov	r16, r22
     a32:	14 2f       	mov	r17, r20
     a34:	d2 2f       	mov	r29, r18
     a36:	48 2f       	mov	r20, r24
     a38:	6e df       	rcall	.-292    	; 0x916 <GLCD_Line>
     a3a:	2d 2f       	mov	r18, r29
     a3c:	41 2f       	mov	r20, r17
     a3e:	60 2f       	mov	r22, r16
     a40:	81 2f       	mov	r24, r17
     a42:	69 df       	rcall	.-302    	; 0x916 <GLCD_Line>
     a44:	20 2f       	mov	r18, r16
     a46:	41 2f       	mov	r20, r17
     a48:	60 2f       	mov	r22, r16
     a4a:	8c 2f       	mov	r24, r28
     a4c:	64 df       	rcall	.-312    	; 0x916 <GLCD_Line>
     a4e:	2d 2f       	mov	r18, r29
     a50:	41 2f       	mov	r20, r17
     a52:	6d 2f       	mov	r22, r29
     a54:	8c 2f       	mov	r24, r28
     a56:	5f df       	rcall	.-322    	; 0x916 <GLCD_Line>
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	08 95       	ret

00000a62 <GLCD_Circle_black>:
	
	//게임 프로그램의 그림 구현("보고서_3.3.4 기타 기능 구현" 참조)
	// draw a circle
	// 원을 그리고 안을 색칠합니다.
	void GLCD_Circle_black(unsigned char x1,unsigned char y1,unsigned char r) {
     a62:	2f 92       	push	r2
     a64:	3f 92       	push	r3
     a66:	4f 92       	push	r4
     a68:	5f 92       	push	r5
     a6a:	6f 92       	push	r6
     a6c:	7f 92       	push	r7
     a6e:	8f 92       	push	r8
     a70:	9f 92       	push	r9
     a72:	af 92       	push	r10
     a74:	bf 92       	push	r11
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
     a8a:	29 97       	sbiw	r28, 0x09	; 9
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	8f 83       	std	Y+7, r24	; 0x07
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) { // draw with y variable
     a98:	c6 2e       	mov	r12, r22
     a9a:	d1 2c       	mov	r13, r1
     a9c:	24 2f       	mov	r18, r20
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	3c 83       	std	Y+4, r19	; 0x04
     aa2:	2b 83       	std	Y+3, r18	; 0x03
     aa4:	59 01       	movw	r10, r18
     aa6:	aa 0c       	add	r10, r10
     aa8:	bb 1c       	adc	r11, r11
     aaa:	a2 0e       	add	r10, r18
     aac:	b3 1e       	adc	r11, r19
     aae:	c5 01       	movw	r24, r10
     ab0:	95 95       	asr	r25
     ab2:	87 95       	ror	r24
     ab4:	95 95       	asr	r25
     ab6:	87 95       	ror	r24
     ab8:	9e 83       	std	Y+6, r25	; 0x06
     aba:	8d 83       	std	Y+5, r24	; 0x05
     abc:	76 01       	movw	r14, r12
     abe:	e8 1a       	sub	r14, r24
     ac0:	f9 0a       	sbc	r15, r25
     ac2:	4c 01       	movw	r8, r24
     ac4:	8c 0c       	add	r8, r12
     ac6:	9d 1c       	adc	r9, r13
     ac8:	8e 14       	cp	r8, r14
     aca:	9f 04       	cpc	r9, r15
     acc:	0c f4       	brge	.+2      	; 0xad0 <GLCD_Circle_black+0x6e>
     ace:	47 c0       	rjmp	.+142    	; 0xb5e <GLCD_Circle_black+0xfc>
			s = sqrt(r*r - (y-y1)*(y-y1)) + 0.5;
     ad0:	22 9f       	mul	r18, r18
     ad2:	10 01       	movw	r2, r0
     ad4:	23 9f       	mul	r18, r19
     ad6:	30 0c       	add	r3, r0
     ad8:	30 0c       	add	r3, r0
     ada:	11 24       	eor	r1, r1
     adc:	96 01       	movw	r18, r12
     ade:	3a 83       	std	Y+2, r19	; 0x02
     ae0:	29 83       	std	Y+1, r18	; 0x01
			for(x = x1- (unsigned char)s; x <= x1 + (unsigned char)s; x++) {
     ae2:	3f 81       	ldd	r19, Y+7	; 0x07
     ae4:	a3 2e       	mov	r10, r19
     ae6:	b1 2c       	mov	r11, r1
     ae8:	c7 01       	movw	r24, r14
     aea:	29 81       	ldd	r18, Y+1	; 0x01
     aec:	3a 81       	ldd	r19, Y+2	; 0x02
     aee:	82 1b       	sub	r24, r18
     af0:	93 0b       	sbc	r25, r19
	// 원을 그리고 안을 색칠합니다.
	void GLCD_Circle_black(unsigned char x1,unsigned char y1,unsigned char r) {
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) { // draw with y variable
			s = sqrt(r*r - (y-y1)*(y-y1)) + 0.5;
     af2:	88 9f       	mul	r24, r24
     af4:	90 01       	movw	r18, r0
     af6:	89 9f       	mul	r24, r25
     af8:	30 0d       	add	r19, r0
     afa:	30 0d       	add	r19, r0
     afc:	11 24       	eor	r1, r1
     afe:	21 01       	movw	r4, r2
     b00:	42 1a       	sub	r4, r18
     b02:	53 0a       	sbc	r5, r19
     b04:	05 2c       	mov	r0, r5
     b06:	00 0c       	add	r0, r0
     b08:	66 08       	sbc	r6, r6
     b0a:	77 08       	sbc	r7, r7
     b0c:	c3 01       	movw	r24, r6
     b0e:	b2 01       	movw	r22, r4
     b10:	5f d1       	rcall	.+702    	; 0xdd0 <__floatsisf>
     b12:	ee d1       	rcall	.+988    	; 0xef0 <sqrt>
			for(x = x1- (unsigned char)s; x <= x1 + (unsigned char)s; x++) {
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	5f e3       	ldi	r21, 0x3F	; 63
     b1c:	c7 d0       	rcall	.+398    	; 0xcac <__addsf3>
     b1e:	2a d1       	rcall	.+596    	; 0xd74 <__fixunssfsi>
     b20:	06 2f       	mov	r16, r22
     b22:	10 e0       	ldi	r17, 0x00	; 0
     b24:	c5 01       	movw	r24, r10
     b26:	80 1b       	sub	r24, r16
     b28:	91 0b       	sbc	r25, r17
     b2a:	99 87       	std	Y+9, r25	; 0x09
     b2c:	88 87       	std	Y+8, r24	; 0x08
     b2e:	0a 0d       	add	r16, r10
     b30:	1b 1d       	adc	r17, r11
     b32:	08 17       	cp	r16, r24
     b34:	19 07       	cpc	r17, r25
     b36:	64 f0       	brlt	.+24     	; 0xb50 <GLCD_Circle_black+0xee>
				GLCD_Dot(x,y);
     b38:	6e 2d       	mov	r22, r14
     b3a:	88 85       	ldd	r24, Y+8	; 0x08
     b3c:	8a de       	rcall	.-748    	; 0x852 <GLCD_Dot>
     b3e:	28 85       	ldd	r18, Y+8	; 0x08
	void GLCD_Circle_black(unsigned char x1,unsigned char y1,unsigned char r) {
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) { // draw with y variable
			s = sqrt(r*r - (y-y1)*(y-y1)) + 0.5;
			for(x = x1- (unsigned char)s; x <= x1 + (unsigned char)s; x++) {
     b40:	39 85       	ldd	r19, Y+9	; 0x09
     b42:	2f 5f       	subi	r18, 0xFF	; 255
     b44:	3f 4f       	sbci	r19, 0xFF	; 255
     b46:	39 87       	std	Y+9, r19	; 0x09
     b48:	28 87       	std	Y+8, r18	; 0x08
     b4a:	02 17       	cp	r16, r18
     b4c:	13 07       	cpc	r17, r19
     b4e:	a4 f7       	brge	.-24     	; 0xb38 <GLCD_Circle_black+0xd6>
     b50:	3f ef       	ldi	r19, 0xFF	; 255
	// draw a circle
	// 원을 그리고 안을 색칠합니다.
	void GLCD_Circle_black(unsigned char x1,unsigned char y1,unsigned char r) {
		int x, y;
		float s;
		for(y = y1 - r*3/4; y <= y1 + r*3/4; y++) { // draw with y variable
     b52:	e3 1a       	sub	r14, r19
     b54:	f3 0a       	sbc	r15, r19
     b56:	8e 14       	cp	r8, r14
     b58:	9f 04       	cpc	r9, r15
     b5a:	0c f0       	brlt	.+2      	; 0xb5e <GLCD_Circle_black+0xfc>
     b5c:	c5 cf       	rjmp	.-118    	; 0xae8 <GLCD_Circle_black+0x86>
     b5e:	8f 81       	ldd	r24, Y+7	; 0x07
			s = sqrt(r*r - (y-y1)*(y-y1)) + 0.5;
			for(x = x1- (unsigned char)s; x <= x1 + (unsigned char)s; x++) {
				GLCD_Dot(x,y);
			}
		}
		for(x = x1 - r*3/4; x <= x1 + r*3/4; x++) { // draw with x variable
     b60:	a8 2e       	mov	r10, r24
     b62:	b1 2c       	mov	r11, r1
     b64:	75 01       	movw	r14, r10
     b66:	2d 81       	ldd	r18, Y+5	; 0x05
     b68:	3e 81       	ldd	r19, Y+6	; 0x06
     b6a:	e2 1a       	sub	r14, r18
     b6c:	f3 0a       	sbc	r15, r19
     b6e:	a2 0e       	add	r10, r18
     b70:	b3 1e       	adc	r11, r19
     b72:	ae 14       	cp	r10, r14
     b74:	bf 04       	cpc	r11, r15
     b76:	0c f4       	brge	.+2      	; 0xb7a <GLCD_Circle_black+0x118>
     b78:	42 c0       	rjmp	.+132    	; 0xbfe <GLCD_Circle_black+0x19c>
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
			s = sqrt(r*r - (x-x1)*(x-x1)) + 0.5;
     b7c:	9c 81       	ldd	r25, Y+4	; 0x04
     b7e:	88 9f       	mul	r24, r24
     b80:	40 01       	movw	r8, r0
     b82:	89 9f       	mul	r24, r25
     b84:	90 0c       	add	r9, r0
     b86:	90 0c       	add	r9, r0
     b88:	11 24       	eor	r1, r1
     b8a:	9f 81       	ldd	r25, Y+7	; 0x07
     b8c:	29 2e       	mov	r2, r25
     b8e:	31 2c       	mov	r3, r1
     b90:	c7 01       	movw	r24, r14
     b92:	82 19       	sub	r24, r2
     b94:	93 09       	sbc	r25, r3
     b96:	88 9f       	mul	r24, r24
     b98:	90 01       	movw	r18, r0
     b9a:	89 9f       	mul	r24, r25
     b9c:	30 0d       	add	r19, r0
     b9e:	30 0d       	add	r19, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	24 01       	movw	r4, r8
     ba4:	42 1a       	sub	r4, r18
     ba6:	53 0a       	sbc	r5, r19
     ba8:	05 2c       	mov	r0, r5
     baa:	00 0c       	add	r0, r0
     bac:	66 08       	sbc	r6, r6
     bae:	77 08       	sbc	r7, r7
     bb0:	c3 01       	movw	r24, r6
     bb2:	b2 01       	movw	r22, r4
     bb4:	0d d1       	rcall	.+538    	; 0xdd0 <__floatsisf>
     bb6:	9c d1       	rcall	.+824    	; 0xef0 <sqrt>
			for(y = y1 - (unsigned char)s; y <= y1 + (unsigned char)s; y++) {
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e0       	ldi	r20, 0x00	; 0
     bbe:	5f e3       	ldi	r21, 0x3F	; 63
     bc0:	75 d0       	rcall	.+234    	; 0xcac <__addsf3>
     bc2:	d8 d0       	rcall	.+432    	; 0xd74 <__fixunssfsi>
     bc4:	06 2f       	mov	r16, r22
     bc6:	10 e0       	ldi	r17, 0x00	; 0
     bc8:	96 01       	movw	r18, r12
     bca:	20 1b       	sub	r18, r16
     bcc:	31 0b       	sbc	r19, r17
     bce:	3a 83       	std	Y+2, r19	; 0x02
     bd0:	29 83       	std	Y+1, r18	; 0x01
     bd2:	0c 0d       	add	r16, r12
     bd4:	1d 1d       	adc	r17, r13
     bd6:	02 17       	cp	r16, r18
     bd8:	13 07       	cpc	r17, r19
     bda:	5c f0       	brlt	.+22     	; 0xbf2 <GLCD_Circle_black+0x190>
     bdc:	69 81       	ldd	r22, Y+1	; 0x01
				GLCD_Dot(x,y);
     bde:	8e 2d       	mov	r24, r14
     be0:	38 de       	rcall	.-912    	; 0x852 <GLCD_Dot>
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
				GLCD_Dot(x,y);
			}
		}
		for(x = x1 - r*3/4; x <= x1 + r*3/4; x++) { // draw with x variable
			s = sqrt(r*r - (x-x1)*(x-x1)) + 0.5;
			for(y = y1 - (unsigned char)s; y <= y1 + (unsigned char)s; y++) {
     be6:	01 96       	adiw	r24, 0x01	; 1
     be8:	9a 83       	std	Y+2, r25	; 0x02
     bea:	89 83       	std	Y+1, r24	; 0x01
     bec:	08 17       	cp	r16, r24
     bee:	19 07       	cpc	r17, r25
     bf0:	ac f7       	brge	.-22     	; 0xbdc <GLCD_Circle_black+0x17a>
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	e9 1a       	sub	r14, r25
			s = sqrt(r*r - (y-y1)*(y-y1)) + 0.5;
			for(x = x1- (unsigned char)s; x <= x1 + (unsigned char)s; x++) {
				GLCD_Dot(x,y);
			}
		}
		for(x = x1 - r*3/4; x <= x1 + r*3/4; x++) { // draw with x variable
     bf6:	f9 0a       	sbc	r15, r25
     bf8:	ae 14       	cp	r10, r14
     bfa:	bf 04       	cpc	r11, r15
     bfc:	4c f6       	brge	.-110    	; 0xb90 <GLCD_Circle_black+0x12e>
     bfe:	29 96       	adiw	r28, 0x09	; 9
     c00:	0f b6       	in	r0, 0x3f	; 63
			s = sqrt(r*r - (x-x1)*(x-x1)) + 0.5;
			for(y = y1 - (unsigned char)s; y <= y1 + (unsigned char)s; y++) {
				GLCD_Dot(x,y);
			}
		}
	}
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	df 90       	pop	r13
     c18:	cf 90       	pop	r12
     c1a:	bf 90       	pop	r11
     c1c:	af 90       	pop	r10
     c1e:	9f 90       	pop	r9
     c20:	8f 90       	pop	r8
     c22:	7f 90       	pop	r7
     c24:	6f 90       	pop	r6
     c26:	5f 90       	pop	r5
     c28:	4f 90       	pop	r4
     c2a:	3f 90       	pop	r3
     c2c:	2f 90       	pop	r2
     c2e:	08 95       	ret

00000c30 <GLCD_1DigitDecimal>:
     c30:	9d ec       	ldi	r25, 0xCD	; 205
     c32:	89 9f       	mul	r24, r25

	// display 1-digit decimal number
	// 1자리의 10진수 값을 표시합니다.
	unsigned char GLCD_1DigitDecimal(unsigned char number, unsigned char flag)
	{
		number %= 10;               // 10^0
     c34:	91 2d       	mov	r25, r1
     c36:	11 24       	eor	r1, r1
     c38:	96 95       	lsr	r25
     c3a:	96 95       	lsr	r25
     c3c:	96 95       	lsr	r25
     c3e:	99 0f       	add	r25, r25
     c40:	29 2f       	mov	r18, r25
     c42:	22 0f       	add	r18, r18
     c44:	22 0f       	add	r18, r18
     c46:	92 0f       	add	r25, r18
     c48:	89 1b       	sub	r24, r25
     c4a:	98 2f       	mov	r25, r24
		
		if ((number == 0) && (flag == 0))
     c4c:	31 f4       	brne	.+12     	; 0xc5a <GLCD_1DigitDecimal+0x2a>
     c4e:	61 11       	cpse	r22, r1
     c50:	04 c0       	rjmp	.+8      	; 0xc5a <GLCD_1DigitDecimal+0x2a>
		{
			lcd_char(' ');
     c52:	80 e2       	ldi	r24, 0x20	; 32
     c54:	a9 dd       	rcall	.-1198   	; 0x7a8 <lcd_char>
			return 0;
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	08 95       	ret
		}
		
		lcd_char(number + '0');
     c5a:	80 e3       	ldi	r24, 0x30	; 48
     c5c:	89 0f       	add	r24, r25
     c5e:	a4 dd       	rcall	.-1208   	; 0x7a8 <lcd_char>
		return 1;
     c60:	81 e0       	ldi	r24, 0x01	; 1
	}
     c62:	08 95       	ret

00000c64 <GLCD_2DigitDecimal>:

	// display 2-digit decimal number
	// 2자리의 10진수 값을 표시합니다.
	void GLCD_2DigitDecimal(unsigned char number)
	{
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
		unsigned int i;
		unsigned char flag;
		
		flag = 0;
		number = number % 100;
     c68:	c9 e2       	ldi	r28, 0x29	; 41
     c6a:	8c 9f       	mul	r24, r28
     c6c:	c1 2d       	mov	r28, r1
     c6e:	11 24       	eor	r1, r1
     c70:	c2 95       	swap	r28
     c72:	cf 70       	andi	r28, 0x0F	; 15
     c74:	94 e6       	ldi	r25, 0x64	; 100
     c76:	c9 9f       	mul	r28, r25
     c78:	80 19       	sub	r24, r0
     c7a:	11 24       	eor	r1, r1
     c7c:	c8 2f       	mov	r28, r24
		i = number/10;
		flag = GLCD_1DigitDecimal(i, flag); // 10^1
     c7e:	dd ec       	ldi	r29, 0xCD	; 205
     c80:	8d 9f       	mul	r24, r29
     c82:	d1 2d       	mov	r29, r1
     c84:	11 24       	eor	r1, r1
     c86:	d6 95       	lsr	r29
     c88:	d6 95       	lsr	r29
     c8a:	d6 95       	lsr	r29
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	8d 2f       	mov	r24, r29
     c90:	cf df       	rcall	.-98     	; 0xc30 <GLCD_1DigitDecimal>
		i = number % 10;
		lcd_char(i + '0');              // 10^0
     c92:	dd 0f       	add	r29, r29
     c94:	8d 2f       	mov	r24, r29
     c96:	88 0f       	add	r24, r24
     c98:	88 0f       	add	r24, r24
     c9a:	d8 0f       	add	r29, r24
     c9c:	8c 2f       	mov	r24, r28
     c9e:	8d 1b       	sub	r24, r29
     ca0:	80 5d       	subi	r24, 0xD0	; 208
     ca2:	82 dd       	rcall	.-1276   	; 0x7a8 <lcd_char>
	}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <__subsf3>:
     caa:	50 58       	subi	r21, 0x80	; 128

00000cac <__addsf3>:
     cac:	bb 27       	eor	r27, r27
     cae:	aa 27       	eor	r26, r26
     cb0:	0e d0       	rcall	.+28     	; 0xcce <__addsf3x>
     cb2:	e0 c0       	rjmp	.+448    	; 0xe74 <__fp_round>
     cb4:	d1 d0       	rcall	.+418    	; 0xe58 <__fp_pscA>
     cb6:	30 f0       	brcs	.+12     	; 0xcc4 <__addsf3+0x18>
     cb8:	d6 d0       	rcall	.+428    	; 0xe66 <__fp_pscB>
     cba:	20 f0       	brcs	.+8      	; 0xcc4 <__addsf3+0x18>
     cbc:	31 f4       	brne	.+12     	; 0xcca <__addsf3+0x1e>
     cbe:	9f 3f       	cpi	r25, 0xFF	; 255
     cc0:	11 f4       	brne	.+4      	; 0xcc6 <__addsf3+0x1a>
     cc2:	1e f4       	brtc	.+6      	; 0xcca <__addsf3+0x1e>
     cc4:	c6 c0       	rjmp	.+396    	; 0xe52 <__fp_nan>
     cc6:	0e f4       	brtc	.+2      	; 0xcca <__addsf3+0x1e>
     cc8:	e0 95       	com	r30
     cca:	e7 fb       	bst	r30, 7
     ccc:	bc c0       	rjmp	.+376    	; 0xe46 <__fp_inf>

00000cce <__addsf3x>:
     cce:	e9 2f       	mov	r30, r25
     cd0:	e2 d0       	rcall	.+452    	; 0xe96 <__fp_split3>
     cd2:	80 f3       	brcs	.-32     	; 0xcb4 <__addsf3+0x8>
     cd4:	ba 17       	cp	r27, r26
     cd6:	62 07       	cpc	r22, r18
     cd8:	73 07       	cpc	r23, r19
     cda:	84 07       	cpc	r24, r20
     cdc:	95 07       	cpc	r25, r21
     cde:	18 f0       	brcs	.+6      	; 0xce6 <__addsf3x+0x18>
     ce0:	71 f4       	brne	.+28     	; 0xcfe <__addsf3x+0x30>
     ce2:	9e f5       	brtc	.+102    	; 0xd4a <__addsf3x+0x7c>
     ce4:	fa c0       	rjmp	.+500    	; 0xeda <__fp_zero>
     ce6:	0e f4       	brtc	.+2      	; 0xcea <__addsf3x+0x1c>
     ce8:	e0 95       	com	r30
     cea:	0b 2e       	mov	r0, r27
     cec:	ba 2f       	mov	r27, r26
     cee:	a0 2d       	mov	r26, r0
     cf0:	0b 01       	movw	r0, r22
     cf2:	b9 01       	movw	r22, r18
     cf4:	90 01       	movw	r18, r0
     cf6:	0c 01       	movw	r0, r24
     cf8:	ca 01       	movw	r24, r20
     cfa:	a0 01       	movw	r20, r0
     cfc:	11 24       	eor	r1, r1
     cfe:	ff 27       	eor	r31, r31
     d00:	59 1b       	sub	r21, r25
     d02:	99 f0       	breq	.+38     	; 0xd2a <__addsf3x+0x5c>
     d04:	59 3f       	cpi	r21, 0xF9	; 249
     d06:	50 f4       	brcc	.+20     	; 0xd1c <__addsf3x+0x4e>
     d08:	50 3e       	cpi	r21, 0xE0	; 224
     d0a:	68 f1       	brcs	.+90     	; 0xd66 <__addsf3x+0x98>
     d0c:	1a 16       	cp	r1, r26
     d0e:	f0 40       	sbci	r31, 0x00	; 0
     d10:	a2 2f       	mov	r26, r18
     d12:	23 2f       	mov	r18, r19
     d14:	34 2f       	mov	r19, r20
     d16:	44 27       	eor	r20, r20
     d18:	58 5f       	subi	r21, 0xF8	; 248
     d1a:	f3 cf       	rjmp	.-26     	; 0xd02 <__addsf3x+0x34>
     d1c:	46 95       	lsr	r20
     d1e:	37 95       	ror	r19
     d20:	27 95       	ror	r18
     d22:	a7 95       	ror	r26
     d24:	f0 40       	sbci	r31, 0x00	; 0
     d26:	53 95       	inc	r21
     d28:	c9 f7       	brne	.-14     	; 0xd1c <__addsf3x+0x4e>
     d2a:	7e f4       	brtc	.+30     	; 0xd4a <__addsf3x+0x7c>
     d2c:	1f 16       	cp	r1, r31
     d2e:	ba 0b       	sbc	r27, r26
     d30:	62 0b       	sbc	r22, r18
     d32:	73 0b       	sbc	r23, r19
     d34:	84 0b       	sbc	r24, r20
     d36:	ba f0       	brmi	.+46     	; 0xd66 <__addsf3x+0x98>
     d38:	91 50       	subi	r25, 0x01	; 1
     d3a:	a1 f0       	breq	.+40     	; 0xd64 <__addsf3x+0x96>
     d3c:	ff 0f       	add	r31, r31
     d3e:	bb 1f       	adc	r27, r27
     d40:	66 1f       	adc	r22, r22
     d42:	77 1f       	adc	r23, r23
     d44:	88 1f       	adc	r24, r24
     d46:	c2 f7       	brpl	.-16     	; 0xd38 <__addsf3x+0x6a>
     d48:	0e c0       	rjmp	.+28     	; 0xd66 <__addsf3x+0x98>
     d4a:	ba 0f       	add	r27, r26
     d4c:	62 1f       	adc	r22, r18
     d4e:	73 1f       	adc	r23, r19
     d50:	84 1f       	adc	r24, r20
     d52:	48 f4       	brcc	.+18     	; 0xd66 <__addsf3x+0x98>
     d54:	87 95       	ror	r24
     d56:	77 95       	ror	r23
     d58:	67 95       	ror	r22
     d5a:	b7 95       	ror	r27
     d5c:	f7 95       	ror	r31
     d5e:	9e 3f       	cpi	r25, 0xFE	; 254
     d60:	08 f0       	brcs	.+2      	; 0xd64 <__addsf3x+0x96>
     d62:	b3 cf       	rjmp	.-154    	; 0xcca <__addsf3+0x1e>
     d64:	93 95       	inc	r25
     d66:	88 0f       	add	r24, r24
     d68:	08 f0       	brcs	.+2      	; 0xd6c <__addsf3x+0x9e>
     d6a:	99 27       	eor	r25, r25
     d6c:	ee 0f       	add	r30, r30
     d6e:	97 95       	ror	r25
     d70:	87 95       	ror	r24
     d72:	08 95       	ret

00000d74 <__fixunssfsi>:
     d74:	98 d0       	rcall	.+304    	; 0xea6 <__fp_splitA>
     d76:	88 f0       	brcs	.+34     	; 0xd9a <__fixunssfsi+0x26>
     d78:	9f 57       	subi	r25, 0x7F	; 127
     d7a:	90 f0       	brcs	.+36     	; 0xda0 <__fixunssfsi+0x2c>
     d7c:	b9 2f       	mov	r27, r25
     d7e:	99 27       	eor	r25, r25
     d80:	b7 51       	subi	r27, 0x17	; 23
     d82:	a0 f0       	brcs	.+40     	; 0xdac <__fixunssfsi+0x38>
     d84:	d1 f0       	breq	.+52     	; 0xdba <__fixunssfsi+0x46>
     d86:	66 0f       	add	r22, r22
     d88:	77 1f       	adc	r23, r23
     d8a:	88 1f       	adc	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	1a f0       	brmi	.+6      	; 0xd96 <__fixunssfsi+0x22>
     d90:	ba 95       	dec	r27
     d92:	c9 f7       	brne	.-14     	; 0xd86 <__fixunssfsi+0x12>
     d94:	12 c0       	rjmp	.+36     	; 0xdba <__fixunssfsi+0x46>
     d96:	b1 30       	cpi	r27, 0x01	; 1
     d98:	81 f0       	breq	.+32     	; 0xdba <__fixunssfsi+0x46>
     d9a:	9f d0       	rcall	.+318    	; 0xeda <__fp_zero>
     d9c:	b1 e0       	ldi	r27, 0x01	; 1
     d9e:	08 95       	ret
     da0:	9c c0       	rjmp	.+312    	; 0xeda <__fp_zero>
     da2:	67 2f       	mov	r22, r23
     da4:	78 2f       	mov	r23, r24
     da6:	88 27       	eor	r24, r24
     da8:	b8 5f       	subi	r27, 0xF8	; 248
     daa:	39 f0       	breq	.+14     	; 0xdba <__fixunssfsi+0x46>
     dac:	b9 3f       	cpi	r27, 0xF9	; 249
     dae:	cc f3       	brlt	.-14     	; 0xda2 <__fixunssfsi+0x2e>
     db0:	86 95       	lsr	r24
     db2:	77 95       	ror	r23
     db4:	67 95       	ror	r22
     db6:	b3 95       	inc	r27
     db8:	d9 f7       	brne	.-10     	; 0xdb0 <__fixunssfsi+0x3c>
     dba:	3e f4       	brtc	.+14     	; 0xdca <__fixunssfsi+0x56>
     dbc:	90 95       	com	r25
     dbe:	80 95       	com	r24
     dc0:	70 95       	com	r23
     dc2:	61 95       	neg	r22
     dc4:	7f 4f       	sbci	r23, 0xFF	; 255
     dc6:	8f 4f       	sbci	r24, 0xFF	; 255
     dc8:	9f 4f       	sbci	r25, 0xFF	; 255
     dca:	08 95       	ret

00000dcc <__floatunsisf>:
     dcc:	e8 94       	clt
     dce:	09 c0       	rjmp	.+18     	; 0xde2 <__floatsisf+0x12>

00000dd0 <__floatsisf>:
     dd0:	97 fb       	bst	r25, 7
     dd2:	3e f4       	brtc	.+14     	; 0xde2 <__floatsisf+0x12>
     dd4:	90 95       	com	r25
     dd6:	80 95       	com	r24
     dd8:	70 95       	com	r23
     dda:	61 95       	neg	r22
     ddc:	7f 4f       	sbci	r23, 0xFF	; 255
     dde:	8f 4f       	sbci	r24, 0xFF	; 255
     de0:	9f 4f       	sbci	r25, 0xFF	; 255
     de2:	99 23       	and	r25, r25
     de4:	a9 f0       	breq	.+42     	; 0xe10 <__floatsisf+0x40>
     de6:	f9 2f       	mov	r31, r25
     de8:	96 e9       	ldi	r25, 0x96	; 150
     dea:	bb 27       	eor	r27, r27
     dec:	93 95       	inc	r25
     dee:	f6 95       	lsr	r31
     df0:	87 95       	ror	r24
     df2:	77 95       	ror	r23
     df4:	67 95       	ror	r22
     df6:	b7 95       	ror	r27
     df8:	f1 11       	cpse	r31, r1
     dfa:	f8 cf       	rjmp	.-16     	; 0xdec <__floatsisf+0x1c>
     dfc:	fa f4       	brpl	.+62     	; 0xe3c <__floatsisf+0x6c>
     dfe:	bb 0f       	add	r27, r27
     e00:	11 f4       	brne	.+4      	; 0xe06 <__floatsisf+0x36>
     e02:	60 ff       	sbrs	r22, 0
     e04:	1b c0       	rjmp	.+54     	; 0xe3c <__floatsisf+0x6c>
     e06:	6f 5f       	subi	r22, 0xFF	; 255
     e08:	7f 4f       	sbci	r23, 0xFF	; 255
     e0a:	8f 4f       	sbci	r24, 0xFF	; 255
     e0c:	9f 4f       	sbci	r25, 0xFF	; 255
     e0e:	16 c0       	rjmp	.+44     	; 0xe3c <__floatsisf+0x6c>
     e10:	88 23       	and	r24, r24
     e12:	11 f0       	breq	.+4      	; 0xe18 <__floatsisf+0x48>
     e14:	96 e9       	ldi	r25, 0x96	; 150
     e16:	11 c0       	rjmp	.+34     	; 0xe3a <__floatsisf+0x6a>
     e18:	77 23       	and	r23, r23
     e1a:	21 f0       	breq	.+8      	; 0xe24 <__floatsisf+0x54>
     e1c:	9e e8       	ldi	r25, 0x8E	; 142
     e1e:	87 2f       	mov	r24, r23
     e20:	76 2f       	mov	r23, r22
     e22:	05 c0       	rjmp	.+10     	; 0xe2e <__floatsisf+0x5e>
     e24:	66 23       	and	r22, r22
     e26:	71 f0       	breq	.+28     	; 0xe44 <__floatsisf+0x74>
     e28:	96 e8       	ldi	r25, 0x86	; 134
     e2a:	86 2f       	mov	r24, r22
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	2a f0       	brmi	.+10     	; 0xe3c <__floatsisf+0x6c>
     e32:	9a 95       	dec	r25
     e34:	66 0f       	add	r22, r22
     e36:	77 1f       	adc	r23, r23
     e38:	88 1f       	adc	r24, r24
     e3a:	da f7       	brpl	.-10     	; 0xe32 <__floatsisf+0x62>
     e3c:	88 0f       	add	r24, r24
     e3e:	96 95       	lsr	r25
     e40:	87 95       	ror	r24
     e42:	97 f9       	bld	r25, 7
     e44:	08 95       	ret

00000e46 <__fp_inf>:
     e46:	97 f9       	bld	r25, 7
     e48:	9f 67       	ori	r25, 0x7F	; 127
     e4a:	80 e8       	ldi	r24, 0x80	; 128
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	08 95       	ret

00000e52 <__fp_nan>:
     e52:	9f ef       	ldi	r25, 0xFF	; 255
     e54:	80 ec       	ldi	r24, 0xC0	; 192
     e56:	08 95       	ret

00000e58 <__fp_pscA>:
     e58:	00 24       	eor	r0, r0
     e5a:	0a 94       	dec	r0
     e5c:	16 16       	cp	r1, r22
     e5e:	17 06       	cpc	r1, r23
     e60:	18 06       	cpc	r1, r24
     e62:	09 06       	cpc	r0, r25
     e64:	08 95       	ret

00000e66 <__fp_pscB>:
     e66:	00 24       	eor	r0, r0
     e68:	0a 94       	dec	r0
     e6a:	12 16       	cp	r1, r18
     e6c:	13 06       	cpc	r1, r19
     e6e:	14 06       	cpc	r1, r20
     e70:	05 06       	cpc	r0, r21
     e72:	08 95       	ret

00000e74 <__fp_round>:
     e74:	09 2e       	mov	r0, r25
     e76:	03 94       	inc	r0
     e78:	00 0c       	add	r0, r0
     e7a:	11 f4       	brne	.+4      	; 0xe80 <__fp_round+0xc>
     e7c:	88 23       	and	r24, r24
     e7e:	52 f0       	brmi	.+20     	; 0xe94 <__fp_round+0x20>
     e80:	bb 0f       	add	r27, r27
     e82:	40 f4       	brcc	.+16     	; 0xe94 <__fp_round+0x20>
     e84:	bf 2b       	or	r27, r31
     e86:	11 f4       	brne	.+4      	; 0xe8c <__fp_round+0x18>
     e88:	60 ff       	sbrs	r22, 0
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <__fp_round+0x20>
     e8c:	6f 5f       	subi	r22, 0xFF	; 255
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	8f 4f       	sbci	r24, 0xFF	; 255
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	08 95       	ret

00000e96 <__fp_split3>:
     e96:	57 fd       	sbrc	r21, 7
     e98:	90 58       	subi	r25, 0x80	; 128
     e9a:	44 0f       	add	r20, r20
     e9c:	55 1f       	adc	r21, r21
     e9e:	59 f0       	breq	.+22     	; 0xeb6 <__fp_splitA+0x10>
     ea0:	5f 3f       	cpi	r21, 0xFF	; 255
     ea2:	71 f0       	breq	.+28     	; 0xec0 <__fp_splitA+0x1a>
     ea4:	47 95       	ror	r20

00000ea6 <__fp_splitA>:
     ea6:	88 0f       	add	r24, r24
     ea8:	97 fb       	bst	r25, 7
     eaa:	99 1f       	adc	r25, r25
     eac:	61 f0       	breq	.+24     	; 0xec6 <__fp_splitA+0x20>
     eae:	9f 3f       	cpi	r25, 0xFF	; 255
     eb0:	79 f0       	breq	.+30     	; 0xed0 <__fp_splitA+0x2a>
     eb2:	87 95       	ror	r24
     eb4:	08 95       	ret
     eb6:	12 16       	cp	r1, r18
     eb8:	13 06       	cpc	r1, r19
     eba:	14 06       	cpc	r1, r20
     ebc:	55 1f       	adc	r21, r21
     ebe:	f2 cf       	rjmp	.-28     	; 0xea4 <__fp_split3+0xe>
     ec0:	46 95       	lsr	r20
     ec2:	f1 df       	rcall	.-30     	; 0xea6 <__fp_splitA>
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <__fp_splitA+0x30>
     ec6:	16 16       	cp	r1, r22
     ec8:	17 06       	cpc	r1, r23
     eca:	18 06       	cpc	r1, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	f1 cf       	rjmp	.-30     	; 0xeb2 <__fp_splitA+0xc>
     ed0:	86 95       	lsr	r24
     ed2:	71 05       	cpc	r23, r1
     ed4:	61 05       	cpc	r22, r1
     ed6:	08 94       	sec
     ed8:	08 95       	ret

00000eda <__fp_zero>:
     eda:	e8 94       	clt

00000edc <__fp_szero>:
     edc:	bb 27       	eor	r27, r27
     ede:	66 27       	eor	r22, r22
     ee0:	77 27       	eor	r23, r23
     ee2:	cb 01       	movw	r24, r22
     ee4:	97 f9       	bld	r25, 7
     ee6:	08 95       	ret
     ee8:	11 f4       	brne	.+4      	; 0xeee <__fp_szero+0x12>
     eea:	0e f4       	brtc	.+2      	; 0xeee <__fp_szero+0x12>
     eec:	b2 cf       	rjmp	.-156    	; 0xe52 <__fp_nan>
     eee:	3e c0       	rjmp	.+124    	; 0xf6c <__fp_mpack>

00000ef0 <sqrt>:
     ef0:	da df       	rcall	.-76     	; 0xea6 <__fp_splitA>
     ef2:	d0 f3       	brcs	.-12     	; 0xee8 <__fp_szero+0xc>
     ef4:	99 23       	and	r25, r25
     ef6:	d9 f3       	breq	.-10     	; 0xeee <__fp_szero+0x12>
     ef8:	ce f3       	brts	.-14     	; 0xeec <__fp_szero+0x10>
     efa:	9f 57       	subi	r25, 0x7F	; 127
     efc:	55 0b       	sbc	r21, r21
     efe:	87 ff       	sbrs	r24, 7
     f00:	43 d0       	rcall	.+134    	; 0xf88 <__fp_norm2>
     f02:	00 24       	eor	r0, r0
     f04:	a0 e6       	ldi	r26, 0x60	; 96
     f06:	40 ea       	ldi	r20, 0xA0	; 160
     f08:	90 01       	movw	r18, r0
     f0a:	80 58       	subi	r24, 0x80	; 128
     f0c:	56 95       	lsr	r21
     f0e:	97 95       	ror	r25
     f10:	28 f4       	brcc	.+10     	; 0xf1c <sqrt+0x2c>
     f12:	80 5c       	subi	r24, 0xC0	; 192
     f14:	66 0f       	add	r22, r22
     f16:	77 1f       	adc	r23, r23
     f18:	88 1f       	adc	r24, r24
     f1a:	20 f0       	brcs	.+8      	; 0xf24 <sqrt+0x34>
     f1c:	26 17       	cp	r18, r22
     f1e:	37 07       	cpc	r19, r23
     f20:	48 07       	cpc	r20, r24
     f22:	30 f4       	brcc	.+12     	; 0xf30 <sqrt+0x40>
     f24:	62 1b       	sub	r22, r18
     f26:	73 0b       	sbc	r23, r19
     f28:	84 0b       	sbc	r24, r20
     f2a:	20 29       	or	r18, r0
     f2c:	31 29       	or	r19, r1
     f2e:	4a 2b       	or	r20, r26
     f30:	a6 95       	lsr	r26
     f32:	17 94       	ror	r1
     f34:	07 94       	ror	r0
     f36:	20 25       	eor	r18, r0
     f38:	31 25       	eor	r19, r1
     f3a:	4a 27       	eor	r20, r26
     f3c:	58 f7       	brcc	.-42     	; 0xf14 <sqrt+0x24>
     f3e:	66 0f       	add	r22, r22
     f40:	77 1f       	adc	r23, r23
     f42:	88 1f       	adc	r24, r24
     f44:	20 f0       	brcs	.+8      	; 0xf4e <sqrt+0x5e>
     f46:	26 17       	cp	r18, r22
     f48:	37 07       	cpc	r19, r23
     f4a:	48 07       	cpc	r20, r24
     f4c:	30 f4       	brcc	.+12     	; 0xf5a <sqrt+0x6a>
     f4e:	62 0b       	sbc	r22, r18
     f50:	73 0b       	sbc	r23, r19
     f52:	84 0b       	sbc	r24, r20
     f54:	20 0d       	add	r18, r0
     f56:	31 1d       	adc	r19, r1
     f58:	41 1d       	adc	r20, r1
     f5a:	a0 95       	com	r26
     f5c:	81 f7       	brne	.-32     	; 0xf3e <sqrt+0x4e>
     f5e:	b9 01       	movw	r22, r18
     f60:	84 2f       	mov	r24, r20
     f62:	91 58       	subi	r25, 0x81	; 129
     f64:	88 0f       	add	r24, r24
     f66:	96 95       	lsr	r25
     f68:	87 95       	ror	r24
     f6a:	08 95       	ret

00000f6c <__fp_mpack>:
     f6c:	9f 3f       	cpi	r25, 0xFF	; 255
     f6e:	31 f0       	breq	.+12     	; 0xf7c <__fp_mpack_finite+0xc>

00000f70 <__fp_mpack_finite>:
     f70:	91 50       	subi	r25, 0x01	; 1
     f72:	20 f4       	brcc	.+8      	; 0xf7c <__fp_mpack_finite+0xc>
     f74:	87 95       	ror	r24
     f76:	77 95       	ror	r23
     f78:	67 95       	ror	r22
     f7a:	b7 95       	ror	r27
     f7c:	88 0f       	add	r24, r24
     f7e:	91 1d       	adc	r25, r1
     f80:	96 95       	lsr	r25
     f82:	87 95       	ror	r24
     f84:	97 f9       	bld	r25, 7
     f86:	08 95       	ret

00000f88 <__fp_norm2>:
     f88:	91 50       	subi	r25, 0x01	; 1
     f8a:	50 40       	sbci	r21, 0x00	; 0
     f8c:	66 0f       	add	r22, r22
     f8e:	77 1f       	adc	r23, r23
     f90:	88 1f       	adc	r24, r24
     f92:	d2 f7       	brpl	.-12     	; 0xf88 <__fp_norm2>
     f94:	08 95       	ret

00000f96 <__udivmodhi4>:
     f96:	aa 1b       	sub	r26, r26
     f98:	bb 1b       	sub	r27, r27
     f9a:	51 e1       	ldi	r21, 0x11	; 17
     f9c:	07 c0       	rjmp	.+14     	; 0xfac <__udivmodhi4_ep>

00000f9e <__udivmodhi4_loop>:
     f9e:	aa 1f       	adc	r26, r26
     fa0:	bb 1f       	adc	r27, r27
     fa2:	a6 17       	cp	r26, r22
     fa4:	b7 07       	cpc	r27, r23
     fa6:	10 f0       	brcs	.+4      	; 0xfac <__udivmodhi4_ep>
     fa8:	a6 1b       	sub	r26, r22
     faa:	b7 0b       	sbc	r27, r23

00000fac <__udivmodhi4_ep>:
     fac:	88 1f       	adc	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	5a 95       	dec	r21
     fb2:	a9 f7       	brne	.-22     	; 0xf9e <__udivmodhi4_loop>
     fb4:	80 95       	com	r24
     fb6:	90 95       	com	r25
     fb8:	bc 01       	movw	r22, r24
     fba:	cd 01       	movw	r24, r26
     fbc:	08 95       	ret

00000fbe <__divmodhi4>:
     fbe:	97 fb       	bst	r25, 7
     fc0:	07 2e       	mov	r0, r23
     fc2:	16 f4       	brtc	.+4      	; 0xfc8 <__divmodhi4+0xa>
     fc4:	00 94       	com	r0
     fc6:	06 d0       	rcall	.+12     	; 0xfd4 <__divmodhi4_neg1>
     fc8:	77 fd       	sbrc	r23, 7
     fca:	08 d0       	rcall	.+16     	; 0xfdc <__divmodhi4_neg2>
     fcc:	e4 df       	rcall	.-56     	; 0xf96 <__udivmodhi4>
     fce:	07 fc       	sbrc	r0, 7
     fd0:	05 d0       	rcall	.+10     	; 0xfdc <__divmodhi4_neg2>
     fd2:	3e f4       	brtc	.+14     	; 0xfe2 <__divmodhi4_exit>

00000fd4 <__divmodhi4_neg1>:
     fd4:	90 95       	com	r25
     fd6:	81 95       	neg	r24
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	08 95       	ret

00000fdc <__divmodhi4_neg2>:
     fdc:	70 95       	com	r23
     fde:	61 95       	neg	r22
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255

00000fe2 <__divmodhi4_exit>:
     fe2:	08 95       	ret

00000fe4 <__umulhisi3>:
     fe4:	a2 9f       	mul	r26, r18
     fe6:	b0 01       	movw	r22, r0
     fe8:	b3 9f       	mul	r27, r19
     fea:	c0 01       	movw	r24, r0
     fec:	a3 9f       	mul	r26, r19
     fee:	70 0d       	add	r23, r0
     ff0:	81 1d       	adc	r24, r1
     ff2:	11 24       	eor	r1, r1
     ff4:	91 1d       	adc	r25, r1
     ff6:	b2 9f       	mul	r27, r18
     ff8:	70 0d       	add	r23, r0
     ffa:	81 1d       	adc	r24, r1
     ffc:	11 24       	eor	r1, r1
     ffe:	91 1d       	adc	r25, r1
    1000:	08 95       	ret

00001002 <do_rand>:
    1002:	8f 92       	push	r8
    1004:	9f 92       	push	r9
    1006:	af 92       	push	r10
    1008:	bf 92       	push	r11
    100a:	cf 92       	push	r12
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	ec 01       	movw	r28, r24
    1018:	68 81       	ld	r22, Y
    101a:	79 81       	ldd	r23, Y+1	; 0x01
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	9b 81       	ldd	r25, Y+3	; 0x03
    1020:	61 15       	cp	r22, r1
    1022:	71 05       	cpc	r23, r1
    1024:	81 05       	cpc	r24, r1
    1026:	91 05       	cpc	r25, r1
    1028:	21 f4       	brne	.+8      	; 0x1032 <do_rand+0x30>
    102a:	64 e2       	ldi	r22, 0x24	; 36
    102c:	79 ed       	ldi	r23, 0xD9	; 217
    102e:	8b e5       	ldi	r24, 0x5B	; 91
    1030:	97 e0       	ldi	r25, 0x07	; 7
    1032:	2d e1       	ldi	r18, 0x1D	; 29
    1034:	33 ef       	ldi	r19, 0xF3	; 243
    1036:	41 e0       	ldi	r20, 0x01	; 1
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	38 d0       	rcall	.+112    	; 0x10ac <__divmodsi4>
    103c:	49 01       	movw	r8, r18
    103e:	5a 01       	movw	r10, r20
    1040:	9b 01       	movw	r18, r22
    1042:	ac 01       	movw	r20, r24
    1044:	a7 ea       	ldi	r26, 0xA7	; 167
    1046:	b1 e4       	ldi	r27, 0x41	; 65
    1048:	4d d0       	rcall	.+154    	; 0x10e4 <__muluhisi3>
    104a:	6b 01       	movw	r12, r22
    104c:	7c 01       	movw	r14, r24
    104e:	ac ee       	ldi	r26, 0xEC	; 236
    1050:	b4 ef       	ldi	r27, 0xF4	; 244
    1052:	a5 01       	movw	r20, r10
    1054:	94 01       	movw	r18, r8
    1056:	52 d0       	rcall	.+164    	; 0x10fc <__mulohisi3>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	8c 0d       	add	r24, r12
    105e:	9d 1d       	adc	r25, r13
    1060:	ae 1d       	adc	r26, r14
    1062:	bf 1d       	adc	r27, r15
    1064:	b7 ff       	sbrs	r27, 7
    1066:	03 c0       	rjmp	.+6      	; 0x106e <do_rand+0x6c>
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	a1 09       	sbc	r26, r1
    106c:	b0 48       	sbci	r27, 0x80	; 128
    106e:	88 83       	st	Y, r24
    1070:	99 83       	std	Y+1, r25	; 0x01
    1072:	aa 83       	std	Y+2, r26	; 0x02
    1074:	bb 83       	std	Y+3, r27	; 0x03
    1076:	9f 77       	andi	r25, 0x7F	; 127
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	df 90       	pop	r13
    1082:	cf 90       	pop	r12
    1084:	bf 90       	pop	r11
    1086:	af 90       	pop	r10
    1088:	9f 90       	pop	r9
    108a:	8f 90       	pop	r8
    108c:	08 95       	ret

0000108e <rand_r>:
    108e:	b9 cf       	rjmp	.-142    	; 0x1002 <do_rand>

00001090 <rand>:
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	b6 cf       	rjmp	.-148    	; 0x1002 <do_rand>

00001096 <srand>:
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    109e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    10a2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    10a6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    10aa:	08 95       	ret

000010ac <__divmodsi4>:
    10ac:	05 2e       	mov	r0, r21
    10ae:	97 fb       	bst	r25, 7
    10b0:	16 f4       	brtc	.+4      	; 0x10b6 <__divmodsi4+0xa>
    10b2:	00 94       	com	r0
    10b4:	0f d0       	rcall	.+30     	; 0x10d4 <__negsi2>
    10b6:	57 fd       	sbrc	r21, 7
    10b8:	05 d0       	rcall	.+10     	; 0x10c4 <__divmodsi4_neg2>
    10ba:	24 d0       	rcall	.+72     	; 0x1104 <__udivmodsi4>
    10bc:	07 fc       	sbrc	r0, 7
    10be:	02 d0       	rcall	.+4      	; 0x10c4 <__divmodsi4_neg2>
    10c0:	46 f4       	brtc	.+16     	; 0x10d2 <__divmodsi4_exit>
    10c2:	08 c0       	rjmp	.+16     	; 0x10d4 <__negsi2>

000010c4 <__divmodsi4_neg2>:
    10c4:	50 95       	com	r21
    10c6:	40 95       	com	r20
    10c8:	30 95       	com	r19
    10ca:	21 95       	neg	r18
    10cc:	3f 4f       	sbci	r19, 0xFF	; 255
    10ce:	4f 4f       	sbci	r20, 0xFF	; 255
    10d0:	5f 4f       	sbci	r21, 0xFF	; 255

000010d2 <__divmodsi4_exit>:
    10d2:	08 95       	ret

000010d4 <__negsi2>:
    10d4:	90 95       	com	r25
    10d6:	80 95       	com	r24
    10d8:	70 95       	com	r23
    10da:	61 95       	neg	r22
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	8f 4f       	sbci	r24, 0xFF	; 255
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	08 95       	ret

000010e4 <__muluhisi3>:
    10e4:	7f df       	rcall	.-258    	; 0xfe4 <__umulhisi3>
    10e6:	a5 9f       	mul	r26, r21
    10e8:	90 0d       	add	r25, r0
    10ea:	b4 9f       	mul	r27, r20
    10ec:	90 0d       	add	r25, r0
    10ee:	a4 9f       	mul	r26, r20
    10f0:	80 0d       	add	r24, r0
    10f2:	91 1d       	adc	r25, r1
    10f4:	11 24       	eor	r1, r1
    10f6:	08 95       	ret

000010f8 <__mulshisi3>:
    10f8:	b7 ff       	sbrs	r27, 7
    10fa:	f4 cf       	rjmp	.-24     	; 0x10e4 <__muluhisi3>

000010fc <__mulohisi3>:
    10fc:	f3 df       	rcall	.-26     	; 0x10e4 <__muluhisi3>
    10fe:	82 1b       	sub	r24, r18
    1100:	93 0b       	sbc	r25, r19
    1102:	08 95       	ret

00001104 <__udivmodsi4>:
    1104:	a1 e2       	ldi	r26, 0x21	; 33
    1106:	1a 2e       	mov	r1, r26
    1108:	aa 1b       	sub	r26, r26
    110a:	bb 1b       	sub	r27, r27
    110c:	fd 01       	movw	r30, r26
    110e:	0d c0       	rjmp	.+26     	; 0x112a <__udivmodsi4_ep>

00001110 <__udivmodsi4_loop>:
    1110:	aa 1f       	adc	r26, r26
    1112:	bb 1f       	adc	r27, r27
    1114:	ee 1f       	adc	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	a2 17       	cp	r26, r18
    111a:	b3 07       	cpc	r27, r19
    111c:	e4 07       	cpc	r30, r20
    111e:	f5 07       	cpc	r31, r21
    1120:	20 f0       	brcs	.+8      	; 0x112a <__udivmodsi4_ep>
    1122:	a2 1b       	sub	r26, r18
    1124:	b3 0b       	sbc	r27, r19
    1126:	e4 0b       	sbc	r30, r20
    1128:	f5 0b       	sbc	r31, r21

0000112a <__udivmodsi4_ep>:
    112a:	66 1f       	adc	r22, r22
    112c:	77 1f       	adc	r23, r23
    112e:	88 1f       	adc	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	1a 94       	dec	r1
    1134:	69 f7       	brne	.-38     	; 0x1110 <__udivmodsi4_loop>
    1136:	60 95       	com	r22
    1138:	70 95       	com	r23
    113a:	80 95       	com	r24
    113c:	90 95       	com	r25
    113e:	9b 01       	movw	r18, r22
    1140:	ac 01       	movw	r20, r24
    1142:	bd 01       	movw	r22, r26
    1144:	cf 01       	movw	r24, r30
    1146:	08 95       	ret

00001148 <_exit>:
    1148:	f8 94       	cli

0000114a <__stop_program>:
    114a:	ff cf       	rjmp	.-2      	; 0x114a <__stop_program>
